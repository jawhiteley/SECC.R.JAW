Trt <- nest <- order
Trt_nest_order
cat("foo")
stop( paste( "foo \n", "bar"))
stop( paste( "foo \r", "bar"))
stop( paste( "foo \n", "     bar"))
stop( paste( "foo \n", "      bar"))
ls()
Trt_nest_order
help.start()
?assign
?get
c("foo", "1") %in% c("2", "foo", "bar")
Rebuilding the help.search() database ...
x <- array(1 : 24, c(2, 3, 4))
slice.index(x, 2)
"foo" %in% c("2", "foo", "bar")
Pos <- lvls
Pos_lvls
Pos_all_lvls
typeof(SECC.ARA.t1$Block)
typeof(SECC.base$Block)
typeof(SECC.base["Block"])
SECC.base["Block"]
typeof(SECC.base["Block"])
typeof(SECC.base[["Block"]])
as.integer("2")
?as
as("2", "integer")
class(SECC.base[["Block"]])
as.integer("2.2")
as.integer("2.foo")
warnings()
length(warning()
)
as.integer("2.foo")
warnings()
length(warnings())
last.warning
log("a)
"
)
warningMessage()
conditionMessage()
log(-1)
class(SECC.base[[Time]])
class(SECC.base[["Time"]])
Pos_old_lvls
Pos_lvls
Pos_all_lvls
levels(SECC["Block"])
levels(SECC.base["Block"])
levels(SECC.base[["Block"]])
stop(
      cat("ERROR: the first argument of the checkSECCdata function", 
          "must be an object of class \"data.frame\"."
         )
     )

stop(
      paste("ERROR: the first argument of the checkSECCdata function", 
          "must be an object of class \"data.frame\".",
         )
     )

stop(
      paste("ERROR: the first argument of the checkSECCdata function", 
          "must be an object of class \"data.frame\"."
         )
     )

numrows(SECC.base)
rows(SECC.base)
dims(SECC.base)
dim(SECC.base)
ls()
class(SECC[["SampleID"]])
class(SECC.base[["SampleID"]])
?args
?arg
str(SECC.raw)
str(SECC.base)
colnames(SECC.raw)
colnames(SECC.raw)["SampleID"]
colnames(SECC.raw)[["SampleID"]]
colnames(SECC.raw)[1] <- "PatchID"
colnames(SECC.raw)
colnames(SECC.raw)[1] <- "SampleID"
colnames(SECC.raw)
Data <- objects
Data_objects
Data_objects[left(Data_objects, 4)=="SECC"]
Data_objects[substr(Data_objects, 1, 4)=="SECC"]
Data_objects[substr(Data_objects, 1, 5)=="SECC."]
q()
n
help.start()
?return
str(SECC.ARA.t1)
c("foo","1") %in% c("foo","bar","1")
c("foo","1") %in% c("foo","1")
min( c("foo","1") %in% c("foo","bar","1") )
min(NA)
min("foo")
min(colnames(SECC.ARA.t1) %in% colnames(SECC.base))
?min
str(SECC.ARA.t1)
SampleID.synonyms
colnames(data) %in% c("SampleID", "PatchID", "ID", "Sample")
colnames(SECC.ARA.t1) %in% c("SampleID", "PatchID", "ID", "Sample")
logic <- colnames(SECC.ARA.t1) %in% c("SampleID", "PatchID", "ID", "Sample")
colnames(SECC.ARA.t1)[logic]
print('foo', 'bar')
str(SECC.ARA.t1)
SECC.ARA.t1$Warming[""]
SECC.ARA.t1[SECC.ARA.t1$Warming=="",1:6]
SECC.ARA.t1[SECC.ARA.t1$Warming!="",1:6]
SECC.ARA.t1[SECC.ARA.t1=="",1:6]
SECC.ARA.t1[SECC.ARA.t1!="",1:6]
SECC.ARA.t1[SECC.ARA.t1[,]!="",1:6]
SECC.ARA.t1[SECC.ARA.t1$Sample=="",1:6]
SECC.ARA.t1[SECC.ARA.t1$Block=="",1:6]
SECC.ARA.t1[575:601,1:6]
SECC.ARA.t1[575:601,1:10]
SECC.ARA.noblanks <- SECC.ARA.t1[SECC.ARA.t1$Sample=="",]
str(SECC.ARA.noblanks)
SECC.ARA.t1[,]==""
min
str(SECC.base)
Frag <- lvls
Frag_lvls
levels(SECC.ARA.t1$Frag) <- list( '1'='1', '2'='2', '3'='3', '4'='4')
levels(SECC.ARA.t1$Frag)
head(SECC.ARA.t1)
head(SECC.ARA.t1)
levels(SECC.ARA.t1$Frag) <- list( '1'='1', '2'='2', '3'='3', '4'='4', '-'=NA)
levels(SECC.ARA.t1$Frag)
head(SECC.ARA.t1)
levels(SECC.ARA.t1$Frag) <- list( '1'='1', '2'='2', '3'='3', '4'='4', NA='-')
require(car)
str(SECC.ARA.ta)
str(SECC.ARA.t1)
str(SECC.cyanobacteria)
SECC.cyanobacteria[SECC.cyanobacteria$Warming=="",]
is.NA(SECC.ARA.t1$Frag[1])
isNA(SECC.ARA.t1$Frag[1])
NA == (SECC.ARA.t1$Frag[1])
NA == (SECC.ARA.t1$C1[1])
?NA
is.na(SECC.ARA.t1$Frag[1])
is.na(SECC.ARA.t1$C1[1])
rm(levels(SECC.ARA.t1$pos))
rm(levels(SECC.ARA.t1$pos)[1])
levels(SECC.ARA.t1$pos)[1]
?source
?merge
SECC.ARA.filtered <- SECC.ARA.t1[SECC.ARA.t1$TimePt==1,]
levels(SECC.ARA.t1$Frag)
?match
?where
?which
(SECC.ARA.t1$TimePt==1 || SECC.ARA.t1$TimePt==2 || SECC.ARA.t1$TimePt==3 || SECC.ARA.t1$TimePt==4 )
SECC.ARA.t1[(SECC.ARA.t1$TimePt==1 || SECC.ARA.t1$TimePt==2 || SECC.ARA.t1$TimePt==3 || SECC.ARA.t1$TimePt==4 ),1:6]
SECC.ARA.t1[(SECC.ARA.t1$TimePt %in% levels(SECC.base$Time) ),1:6]
ls()
levels(SECC.ARA.noblanks[["Frag"]]
)
SECC.ARA.noblanks$Frag <- factor(SECC.ARA.noblanks$Frag)
levels(SECC.ARA.noblanks[["Frag"]])
head(SECC.ARA.noblanks)
SECC.ARA.noblanks <- SECC.ARA.t1[SECC.ARA.t1$TimePt!='',]
head(SECC.ARA.noblanks)
levels(SECC.ARA.noblanks$Frag) <- levels(SECC.base$Time)
levels(SECC.ARA.noblanks$Frag) <- levels(SECC.base$Frag)
SECC.ARA.noblanks <- SECC.ARA.t1[(SECC.ARA.t1[['Frag']] %in% levels(SECC.base[['Frag']])),]
head(SECC.ARA.noblanks)
levels(SECC.ARA.noblanks$Frag)
SECC.ARA.noblanks <- SECC.ARA.t1[(SECC.ARA.t1[['Frag']] %in% levels(SECC.base[['Frag']])),]
levels(SECC.ARA.noblanks$Frag)
SECC.ARA.noblanks[SECC.ARA.noblanks$Frag=='-',]
SECC.ARA.noblanks$Frag <- as(SECC.ARA.noblanks$Frag, "factor")
levels(SECC.ARA.noblanks$Frag)
SECC.ARA.noblanks$Frag <- factor(SECC.ARA.noblanks$Frag)
levels(SECC.ARA.noblanks$Frag)
?source
getOption("verbose")
?merge
names(SECC.base)
colnames(SECC.base)
intersect(names(SECC.base), names(SECC.ARA.t1))
str(SECC)
str(SECC.ARA.t1)
str(SECC.ARA.t1
)
str(SECC.ARA.t1)
str(SECC.ARA.t1)
head(SECC.ARA.t1
)
str(SECCcolumns(SECC.ARA.t1))
SECC.ARA.t1[SECC.ARA.t1[1]!='']
SECC.ARA.t1[1]
head(SECC.ARA.t1[SECC.ARA.t1[1]!='',])
head(SECC.ARA.t1[SECC.ARA.t1[1]!=NA,])
head(SECC.ARA.t1[!is.na(SECC.ARA.t1[1]),])
head(SECC.ARA.t1[is.na(SECC.ARA.t1[1])==FALSE,])
str(SECC.ARA.t1
)
max( is.na(SECC.ARA.t1[[SampleID]]) )
max( is.na(SECC.ARA.t1[['SampleID']]) )
is.na(SECC.ARA.t1[['SampleID']])
(SECC.ARA.t1[['SampleID']]
)
str(SECC.ARA.t1
)
max( is.na(SECC.ARA.t1[['Sample']]) )
print(cat("foo"))
print(paste("foo"))
echo(paste("foo"))
str(SECC.ARA.t1)
head( as(SECC.ARA.t1$Block, "factor") )
head( as(SECC.ARA.t1$Block, "char") )
typeof(SECC.base$Block)
class(SECC.base$Block)
is.factor(SECC.base$Block)
( min( is.na(SECC.ARA.t1[['Sample']]) ) == 1 || min( SECC.ARA.t1[['Sample']] == '' ) == 1 )
str(SECC.ARA.t1)
( min( is.na(SECC.ARA.t1[['SampleID']]) ) == 1 || min( SECC.ARA.t1[['SampleID']] == '' ) == 1 )
( min( is.na(SECC.cyanobacteria[['SampleID']]) ) == 1 || min( SECC.cyanobacteria[['SampleID']] == '' ) == 1 )
( min( is.na(SECC.cyanobacteria[['Sample']]) ) == 1 || min( SECC.cyanobacteria[['Sample']] == '' ) == 1 )
names(SECC.ARA.t1)
names(SECC.cyanobacteria)
( min( is.na(SECC.cyanobacteria[['Sample']]) ) == 1 || min( SECC.cyanobacteria[['Sample']] == '' ) == 1 )
( min( is.na(SECC.cyanobacteria[['Block']]) ) == 1 || min( SECC.cyanobacteria[['Block']] == '' ) == 1 )
str(SECC.cyanobacteria)
( min( is.na(SECC.cyanobacteria[['Block']]) ) == 1 )
typeof(SECC.base$Chamber)
class(SECC.base$SampleID)
ifelse( TRUE, "Foo", "Bar" )
ifelse( FALSE, "Foo", "Bar" )
SECC.ARA.t1[["SampleID"]][!is.na(SECC.ARA.t1[["SampleID"]])]
str(SECC.ARA.t1)
str(SECC.cyanobacteria)
str(SECC)
str(SECC.ARA.t1)
SECC.by
intersection(names(SECC), names(SECC.ARA.t1))
intersect(names(SECC), names(SECC.ARA.t1))
  SECC <- merge( SECC, SECC.ARA.t1, by=SECC.by, all.x=TRUE, all.y=FALSE, sort=FALSE)
str(SECC)
head(SECC, 10)
SECC[1500:1510,1:10]
SECC[150:160,1:10]
  SECC <- merge( SECC, SECC.cyanobacteria, by=SECC.by, all.x=TRUE, all.y=FALSE, sort=FALSE)
str(SECC)
str(SECC)
unique(SECC$SampleID)
SECC$SampleID
head(SECC)
str(SECC.cyanobacteria)
str(SECC.ARA.t1)
str(SECC.ARA.t1)
str(SECC.cyanobacteria)
str(SECC)
head(SECC)
levels(SECC$Pos)
unique(SECC$Pos)
SECC[SECC$Pos=="I"),]
SECC[SECC$Pos=="I",]
str(SECC)
Trt_sort_orer
Trt_sort_order
Trt_nest_order
?sort_df
)
ls()
?rm
names(SECC)[substr(names(SECC), 1, 5)=="SECC."]
names(SECC)[substr(names(SECC), 1, 3)=="ARA"]
substr( "ARAml", 4, length("ARAml") )
length("ARAml")
?numchars
chars
?chars
??char
help.start()
Rebuilding the help.search() database ...
grep("SSECC.ARA", "SECC.", "", perl=TRUE)
gsub("SSECC.ARA", "SECC.", "", perl=TRUE)
gsub("SECC.", "", "SSECC.ARA", perl=TRUE)
gsub("SECC.", "", "SECC.ARA", perl=TRUE)
gsub("\\bSECC.", "", "SECC.ARA", perl=TRUE)
?cat
?paste
str(SECC.ARA)
list("ARA"="umol/g dwt")
str(SECC.cyanobacteria)
str(SECC.ARA)
10/
2
rows(SECC)
nrows(SECC)
row(SECC)
length(SECC)
dim(SECC)[1]
length("foo")
mean(4, 2)
mean(c(4, 2))
str(SECC.ARA)
foo <- c(1, 2, 3)
foo[foo>2] <- NA
foo
foo *2
substr( "foo", 1, 3)
substr( "foo", 1, 4)
ls()
Frag <- labels
Frag_labels
str(SECC.base)
str(SECC.ARA.t1)
attach(SECC.ARA.t1)
i = 3
Control.umol
ID.control
Control.id
ID.blank
Blank.umol
i = 1
i = 2
i = 4
ID.blank
ID.blank
i
i = 1
Balnk.umol
Blank.umol
ID.blannk
ID.blank
Blank.id
str(SECC.ARA)
head(SECC.ARA)
head(SECC.ARA, 10)
rm(list=ls())
ls()
merge.SECC
str(SECC)
head(SECC)
head(SECC)
?clean.vars
str(SECC)
unique(SECC$Time)
SECC[is.na(SECC$Time),]
str(SECC.cyanobacteria)
aggregate
?aggregate
?tapply
10/1000
rm(list=ls())
aggregate(state.x77, list(Region = state.region), mean)
     ## example with character variables and NAs
     testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
                          v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
     by1 <- c("red","blue",1,2,NA,"big",1,2,"red",1,NA,12)
     by2 <- c("wet","dry",99,95,NA,"damp",95,99,"red",99,NA,NA)
     aggregate(x = testDF, by = list(by1, by2), FUN = "mean")

testDF
aggregate.data.frame
NROW(SECC.cyanobacteria)
state.x77
head(state.x77
)
state.region
str(SECC.cyanobacteria)
sapply(SECC.cyanobacteria, class)
class(col.types)
names(col.types)
str(col.types)
col.types
col.types == "factor"
str(SECC.cyanobacteria)
str(SECC.cyanobacteria)
str(SECC.cyanobacteria)
str(SECC.cyano)
str(cyanobacteria)
str(SECC.cyanobacteria)
str(SECC.cyano)
SECC.cyano[170:180,]
sum(SECC.cyanobacteria$ARA.dwt)
sum(SECC.cyanobacteria$ARA.dwt, na.action = na.omit)
sum(SECC.cyanobacteria$ARA.dwt, na.omit = TRUE)
sum(SECC.cyanobacteria$ARA.dwt, na.rm = TRUE)
str(SECC.cyano)
str(SECC.cyanobacteria)
str(SECC.cyano)
head(SECC.cyanobacteria)
str(SECC.cyanobacteria)
str(SECC.cyano)
length(SECC.cyanobacteria[Count==1])
length(SECC.cyanobacteria$Count["1"])
length(SECC.cyanobacteria$Count["2"])
SECC.cyanobacteria$Count["2"]
length(SECC.cyanobacteria$Count[SECC.cyanobacteria$Count==1])
length(SECC.cyanobacteria$Count[SECC.cyanobacteria$Count==2])
str(SECC.cyano)
SECC.cyano[SECC.cyano$Count!=3,]
SECC.cyano[SECC.cyano$SampleID=="21C-2.N",]
SECC.cyano[SECC.cyano$SampleID=="21C-1.N",]
str(SECC.cyano)
str(SECC.cyano)
str(SECC.ARA)
str(SECC)
head(SECC)
head(SECC.ARA)
head(SECC.cyanobacteria)
head(SECC)
head(SECC.cyanobacteria)
ls()
Trt_sort_order
Trt_nest_order
str(SECC.ARA)
SECC.ARAcheck <- checkSECCdata(SECC.ARA)
str(SECC.ARAcheck)
str(SECC)
head(SECC)
str(SECC.ARA)
levels(SECC.ARA$SampleControl)
head(SECC.ARA)
substr( "Foo", -1)
substr( "Foo", -1, -)
substr( "Foo", -1, -2)
substr( "Foo", -1, 0)
grep( "(?<=\.)\d", "foo.123", value = TRUE)
grep( "(?<=\\.)\d", "foo.123", value = TRUE)
grep( "(?<=\.)\d", "foo.123", value = TRUE, perl = TRUE )
grep( "(?<=\\.)\\d", "foo.123", value = TRUE)
grep( "(?<=\\.)\\d", "foo.123", value = TRUE, perl = TRUE)
grep("(?<=\\.)\\d", "foo.123", value = FALSE, perl = TRUE)
grep("(?<=\\.)\\d", "foo.423", value = FALSE, perl = TRUE)
grep("(?<=\\.)\\d", "foo.723", value = FALSE, perl = TRUE)
grep("(?<=\\.)\\d", "foo.723", value = TRUE, perl = TRUE, fixed=TRUE)
grep("(?<=\\.)\\d", "foo.723", value = TRUE, perl = TRUE)
strsplit("(?<=\\.)\\d", "foo.723", value = TRUE, perl = TRUE)
strsplit("(?<=\\.)\\d", "foo.723", perl = TRUE)
strsplit("foo.723", "(?<=\\.)\\d", perl = TRUE)
strsplit("foo.723", "^(?<=\\.)\\d", perl = TRUE)
pi*(2.75/2)^2
warnings()
str(SECC.ARA)
str(SECC)
str(SECC)
str(SECC.ARA)
str(SECC.cyanobacteria)
head(SECC)
head(SECC.ARA)
str(SECC.ARA)
head(SECC.ARA)
str(SECC)
str(SECC.ARA)
str(SECC)
str(SECC)
head(SECC)
head(SECC[SECC$Block==3])
head(SECC[SECC$Block==3,])
head(SECC[SECC$Block==6,])
?write.csv
?read.csv
SECCdata_summary(SECC)
SECCdata.summary <- SECCdata_summary(SECC)
head(SECCdata.summary)
data = SECC
Col.totals
ID <- cols
ID_cols
head(data[, ID_cols]
)
table(data[["Block"]])
table(data[,"Block"])
table(data[,c("Block", "Time"])
table(data[,c("Block", "Time")])
SECCdata.summary <- SECCdata_summary(SECC)
table(data[["Chamber"]])
table(data[["Chamber"]], exclude = NULL)
table(data[["Pos"]])
levels(SECC$Pos)
SECCdata.summary <- SECCdata_summary(SECC)
head(SECCdata.summary)
length(SECC$ARA.ml[SECC$Chamber=="A"])
length( na.omit( SECC$ARA.ml[SECC$Chamber=="A"] ) )
length( na.omit( SECC[SECC$Chamber=="A", "ARA.ml"] ) )
table(data[["Pos"]])
unlist( table(data[["Pos"]]) )
names( table(data[["Pos"]]) )
c( table(data[["Pos"]]) )
as.vector( table(data[["Pos"]]) )
SECCdata.summary <- SECCdata_summary(SECC)
SECCdata.summary
SECCstr(SECC)
SECCstr(SECC)
SECC[(SECC$Chamber=="B" && !is.na(SECC$Cells)), ]
SECC[(SECC$Chamber=="B" & !is.na(SECC$Cells)), ]
