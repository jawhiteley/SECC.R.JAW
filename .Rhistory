prob_fat
prob_stored
linear_kelp_sims = list(original_data = kelp_data)
  sim_kelp = rnorm(n_kelp, mean = fitted(kelp_linear),sd = kelp_sd)
  linear_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
linear_kelp_sims = ldply(linear_kelp_sims)
linear_kelp_plot = ggplot(data=linear_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point() + facet_wrap(~.id) +
show(linear_kelp_plot)
plot(kelp_data$urchin_density, kelp_data$kelp_density)
abline(lm(kelp_density~urchin_density, data=kelp_data[1:40, ]))
zinf_kelp_sims = list(original_data = kelp_data)
for(i in 1:15){
  test_name = paste("test",i, sep="")
  sim_urchin = kelp_data$urchin_density
  sim_kelp = rnorm(n_kelp, mean = kelp_pos_dens,sd = kelp_sd_pos)
  sim_kelp = sim_kelp*rbinom(n_kelp, size=1, prob = kelp_prob)
  zinf_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
                                              kelp_density= sim_kelp)
}
zinf_kelp_sims = ldply(zinf_kelp_sims)
zinf_kelp_plot = ggplot(data=zinf_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point()+ facet_wrap(~.id) +
stat_smooth(method = "lm",se=F, size=1.5)+
stat_smooth(se=F, colour="red", size=1.5)
show(zinf_kelp_plot)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
install.packages("glmulti")
library(glmulti)
help,start()
x = "foo"
load("/Users/jaw/Desktop/workspace")
ls()
assign("x", 3)
x
?log
x <- 10^-(1+2*1:9)#
cbind(x, log(1+x), log1p(x), exp(x)-1, expm1(x))
samples <- seq(1, 60)
?rep
rep(samples, each = 2)
rep(samples, each = 2) -> samples
data.frame(samples)
samples
?print
?format
sprintf(samples)
sprintf(as.character(samples))
sprintf(paste("%0",samples, sep=""))
sprintf("%0",samples)
sprintf("%02",samples)
sprintf("%0d",samples)
sprintf("%02d",samples)
sprintf("%02d",samples) -> samples
as.data.frame(samples)
print(samples)
print(samples, quote = FALSE)
print(samples, quote = FALSE, index = FALSE)
print(samples, quote = FALSE, row.names = FALSE)
print(as.data.frame(samples), quote = FALSE, row.names = FALSE)
print(as.data.frame(samples), quote = FALSE, row.names = FALSE, alignment = "left")
print(as.data.frame(samples), quote = FALSE, row.names = FALSE, col.names = FALSE)
print(as.data.frame(x=samples), quote = FALSE, row.names = FALSE, col.names = FALSE)
print(data.frame(x=samples), quote = FALSE, row.names = FALSE, col.names = FALSE)
###################################################
# R analysis script template#
# R v 2.9.0#
###################################################
## INITIALISE#
rm(list=ls())	# clear memory#
# setwd("/Users/jonathan/Documents/ My Documents/PhD/Analysis")	# Set Working Directory: replace getwd() with a path in quotes "".#
library(car)	# for recode#
#
#
## LOAD DATA#
decomp <- read.csv("Decomposition.csv", na.string="")	# or read.table() for a text file # specify mising values with na.string=""#
#
## PROCESSING?#
decomp$Warming <- as.factor(decomp$Warming)#
decomp$Warming <- as.factor(decomp$Warming)#
decomp$Frag <- as.factor(decomp$Fragmentation)#
decomp$pos <- as.factor(decomp$position)#
decomp$Chamber <- recode(decomp$Warming, "'A'='Ambient'; 'B'='Partial Chamber'; 'C'='Full Chamber'", #
					as.factor.result=TRUE, levels=c("Ambient", "Partial Chamber", "Full Chamber"))#
decomp$Frag <- recode(decomp$Frag, "1='Continuous'; 2='Full Corridors'; 3='Pseudo-Corridors'; 4='Isolated'", #
					as.factor.result=TRUE, levels=c("Continuous", "Full Corridors", "Pseudo-Corridors", "Isolated"))#
decomp$pos <- factor(decomp$pos, levels=c("I", "S", "W", "E", "N", "O"))	# safely reorder factor levels#
decomp$pos1 <- recode(decomp$pos, "'I'='Inner'; 'O'='Outer'; else='Other'",	#
	as.factor.result=TRUE, levels=c("Inner", "Other", "Outer"))#
## Transformation#
decomp$trans.mass.loss <- asin( sqrt( decomp$prop.mass.loss ) )#
## Filters#
decomp.Full <- decomp	# holding variable#
decomp.Ambient <- subset( decomp, decomp$Type=="Ambient" )	# Ambient controls from outside the experimental plots#
decomp.Control <- subset( decomp, decomp$Type=="Control" )	# Procedural controls ( transported & processed, but not left for a year in the moss )#
decomp.Expt	   <- subset( decomp, decomp$Type=="Experiment" )	# Litter Bags used in the Experiment#
decomp <- decomp.Full	# in case recovery is necessary#
decomp <- decomp.Expt	# for most of the rest of the analyses#
#
#
## CHECKING#
head(decomp)		# have a peek at the first 6 rows & columns: is this what you expected?#
str(decomp)		# check structure: are the appropriate variables factors, numeric, etc.?#
summary(decomp)	# summary statistics#
#
## EXPLORE - PLOTS#
library(Rcmdr)	# plotMeans#
# Plot Means#
# par( yaxp=c(0, 1, 5) )#
with(decomp, plotMeans(trans.mass.loss, Chamber, #
	error.bars="conf.int", level=0.95, #
	xlab="Warming Treatment", ylab="% Mass loss (asin√)", #
	main="Decomposition"))#
with(decomp, plotMeans(trans.mass.loss, pos, #
	error.bars="conf.int", level=0.95, #
	xlab="Warming Treatment", ylab="% Mass loss (asin√)", #
	main="Decomposition"))#
with(decomp, plotMeans(trans.mass.loss, Frag, #
	error.bars="conf.int", level=0.95,#
	xlab="Fragmentation treatment", ylab="% Mass loss (asin√)", #
	main="Decomposition"))#
with(decomp, plotMeans(trans.mass.loss, pos1, Chamber, #
	error.bars="conf.int", level=0.95,#
	xlab="Fragment Position", ylab="% Mass loss (asin√)", #
	legend.lab="Chamber Treatment", #
	main="Decomposition", #
	pch=c(1,23,18), col=c(1,4,2), lty=c(3,2,1)))#
#
with(decomp.Full, plotMeans(trans.mass.loss, Type,#
	error.bars="conf.int", level=0.95, #
	xlab="Type", ylab="% Mass loss (asin√)", #
	main="Decomposition"))#
#
#
layout(matrix(1:n, rows, cols), respect=TRUE)	# or par(mfrow)	# layout of plots within graphics frame#
# make some meaningful plots of data to check for predicted (expected) patterns.#
#
#
## DEFINE MODEL#
decomp.model <- 	# What Is Your Question? #
#
## ANALYSIS#
decomp.analysis <- 	# Which function to use for desired analysis?#
#
## CHECK ASSUMPTIONS (analyse residuals, standard diagnostic plots)#
par(mfrow=c(3,2))	# panel of figures: 3 rows & 2 columns#
plot(decomp.analysis)#
hist(resid(decomp.analysis))	# plot residuals#
#
## GET RESULTS OF ANALYSIS#
names(decomp.analysis)#
anova(decomp.analysis)		# anova table (may or may not be informative)#
summary(decomp.analysis)	# summary statistics#
#
## FINAL GRAPHICS#
symbol.map <-	# map point chdecompcters to treatment levels or groups#
col.map <-		# map colours to treatment levels or groups#
layout(, respect=TRUE)	# or par(mfrow)	# layout of plots within graphics frame
with(decomp.Full, plotMeans(trans.mass.loss, Type,#
	error.bars="conf.int", level=0.95, ylim = c(0, 0.5),#
	xlab="Type", ylab="% Mass loss (asin√)", #
	main="Decomposition"))
decomp
str(decomp.Full)
length(decomp.Full$Type == "Control")
length(which(decomp.Full$Type == "Control"))
length(which(decomp.Full$Type == "Ambient"))
length(which(decomp.Full$Type == "Experiment"))
list.packages()
?packages
??packages
help.start()
install.packages("Rcmdr")
?read.csv
version
?read.csv
as.number(" 5")
as.numeric(" 5")
plot(1:25, pch = 1:25)
plot(1:25, pch = 1:25, lwd = 2)
plot(1:25, pch = 1:25, lwd = 3)
plot(1:25, pch = 1:25, lwd = 2)
plot(1:25, pch = 1:25, lwd = 2.5)
source("/tmp/r-plugin-jaw/Rsource-20579-Decomposition.R")
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
source("/tmp/r-plugin-jaw/Rsource-20579-Decomposition.R")
  ggsave(file = paste(Save.final, "- CxP.eps"), plot = CxP.plot, width = 6, height = 3, scale = 1.5)
  ggsave(file = paste(Save.final, "- CxP.eps"), plot = CxP.plot, width = 3, height = 3, scale = 1.5)
rm(list=ls())	# clear memory
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
source("./SECC/lib/SECC.functions.R")	#2010-05-04
source("./ SECC/lib/SECC.functions.R")	#2010-05-04
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
traceback()
model.tables(Yp.aov, "means")	# effect sizes
par(mfrow=c(2,2))	# panel of figures: 2 rows & 2 columns
with( SECC, interaction.plot( Frag, Chamber, Y.use, ylab=paste("mean of ", Y.used) ) )
with( SECC, interaction.plot( pos1, Chamber, Y.use, ylab=paste("mean of ", Y.used) ) )
with( SECC, interaction.plot( pos1, Frag, Y.use, ylab=paste("mean of ", Y.used) ) )
lsd.Cxp <- LSD( Yp.aov$Within, Yp.model, data=SECC, alpha=0.05, mode="manual", n=32 )	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
lsd.Cxp <- MSD( Yp.aov$Within, Yp.model, data=SECC, alpha=0.05, mode="manual", n=32 )	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
source("./ SECC/lib/fun.R")
rm(list=ls())	# clear memory
library(car)		# load external package 'car', for recode()
library(lattice)	# mostly for xyplot
library(nlme)		# mixed-effect models
source("./ SECC/lib/SECC.functions.R")	#2010-05-04
source("./ SECC/lib/fun.R")
setwd("./ SECC")
source("./lib/fun.R")
setwd("../")
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
ls()
lsd.Cxp <- MSD( Yp.aov$Within, Yp.model, data=SECC, alpha=0.05, mode="manual", n=32 )	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
lsd.Cxp <- MSD( Yp.aov$Within, Yp.model, data=SECC, alpha=0.05)	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
lsd.Cxp <- MSD( Yp.aov$Within, Yp.model, alpha=0.05, method="unplanned")	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
lsd.Cxp <- MSD( Yp.aov$Within, Yp.model, method="unplanned", alpha=0.05)	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
traceback()
lsd.Cxp <- MSD( Yp.aov, alpha=0.05, method="unplanned")	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
traceback()
SECCstr(SECC)
setwd("./ SECC")
SECCstr(SECC)
setwd("..")
str(SECC)
invisible(edit(SECC))
print(Yp.aov)
MSD
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
lsd.Cxp <- MSD( Yp.aov, alpha=0.05, method="unplanned", mode.df="manual", n=32)	# compute LSDs based on a 5% error rate (alpha), 2-tailed.  Manual, due to unbalanced data (this is an estimate).
checkSECCdata(SECC)
setwd("/ SECC/")
setwd(" SECC/")
checkSECCdata(SECC)
SECC_sampleID(SECC)
setwd("..")
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
traceback()
Chamber.map <-	data.frame( label=levels(SECC$Chamber), col=c("#000000","#000099","#990000"), bg=c("#FFFFFF","#FFFFFF","#FFFFFF"), pch=c(21,23,18), lty=c(3,2,1) )
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
lsd.Cxp <- 0.65
  lsd.Cxp <- 0.65 # rough guess based on old output :(
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
  lsd.Cxp <- 0.65*2 # rough guess based on old output :(
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
max(Y.use)
max(SECC$Y.use)
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
source("/tmp/r-plugin-jaw/Rsource-20674-SECC-mossgrowth.R")
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
source('./lib/init.R')
library(vegan)	# load external package
library(ggplot2)	# load external package
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna.R")
source('./lib/init.R')
library(vegan)	# load external package
library(ggplot2)	# load external package
Samples.fauna <- which(SECC.fauna$Time == 4)
Vars.fauna    <- setdiff(colnames(SECC.fauna),
                         SECC.fauna.meta$ID[SECC.fauna.meta$Taxonomic.Group %in% c("Other", "Prostigmata")]
)
Spp.fauna <- intersect(SECC.fauna.meta$ID, Vars.fauna)
SECC.fauna.full <- SECC.fauna   # save a copy, just in case
Fauna.sp <- SECC.fauna[Samples.fauna, Vars.fauna]
Fauna.meta <- SECC.fauna.meta[which(SECC.fauna.meta$ID %in% Spp.fauna), ]
SECC.sp.sum <- Fauna.sp[, c('SampleID', 'Block', 'Time', 'Chamber', 'Frag', 'Pos')]
Taxa.groups <- unique(Fauna.meta$Taxonomic.Group)
SECC.sp.sum <- within(SECC.sp.sum, {
    for (taxa in Taxa.groups) {
      assign( taxa, apply(Fauna.sp[, Fauna.meta$ID[which(Fauna.meta$Taxonomic.Group == taxa)] ], 1, sum) )
    }
    rm(taxa)
    Uropodina <- apply(Fauna.sp[, Fauna.meta$ID[which(Fauna.meta$Major.Taxa == "  Uropodina")] ], 1, sum)
    Mesostig.preds <- Mesostigmata - Uropodina
    Predators <- Mesostig.preds + ifelse(exists('Prostigmata'), Prostigmata, 0)
    Grazers <- Collembola + Uropodina
    fauna.jaw <- Mesostigmata + Collembola
    fauna <- apply(Fauna.sp[, Fauna.meta$ID], 1, sum)
})
Cols.sp.sum <- c('SampleID', 'Block', 'Time', 'Chamber', 'Frag', 'Pos',
                 'Mesostigmata', 'Collembola', 'Prostigmata', 'Other',
                 'Uropodina', 'Mesostig.preds', 'Predators', 'Grazers',
                 'fauna.jaw', 'fauna')
SECC.sp.sum <- SECC.sp.sum[, Cols.sp.sum[which( sapply(Cols.sp.sum, function(x) x %in% colnames(SECC.sp.sum)) )]]  # manually reorder columns
SECC.sp <- data.frame(SampleID = Fauna.sp[['SampleID']])
Taxa.groups <- rev( unique(Fauna.meta$sp_alias) )
SECC.sp <- within(SECC.sp, {
    for (taxa in Taxa.groups) {
      taxa.sp <- Fauna.meta$ID[which(Fauna.meta$sp_alias == taxa)]
      taxa.sp <- intersect(taxa.sp, colnames(Fauna.sp))
      if (length(taxa.sp) > 0) {
        assign( taxa,
               if (length(taxa.sp) > 1)
                 apply(Fauna.sp[, taxa.sp], 1, sum)
               else
                 Fauna.sp[, taxa.sp]
        )
      }
    }
    rm(taxa, taxa.sp)
})
rownames(SECC.sp) <- SECC.sp$SampleID
SECC.sp <- SECC.sp[, -1]    # Data matrix only: remove SampleID column, leave IDs in rownames
Fauna <- SECC.sp
SECC.sp.sum <- within(SECC.sp.sum, {
    Richness <- apply(SECC.sp, 1, function(x) length(which(x>0)) )  # observed # spp.
    Evenness <- diversity(SECC.sp, index = "invsimpson")
})
if (FALSE) {
  Fauna.bip <- qplot(Collembola, Mesostig.preds, data = SECC.fauna.sum,
                     ) + theme_bw() # group = Chamber, shape = Pos, colour = Chamber
  print(Fauna.bip)
  Fauna.bip <- Fauna.bip + facet_grid(facets = Chamber~Pos)
  print(Fauna.bip)
boxplot( Fauna            , main = "raw data")
boxplot( sqrt( Fauna )    , main = "sqrt")
boxplot( Fauna ^0.25      , main = "4th rt")
boxplot( log( Fauna +1 )  , main = "log_e(X +1)")
boxplot( log( Fauna +1 , base = 2)  , main = "log_2(X +1)")
boxplot( decostand( Fauna, method = 'log' )         , main = "log (decostand)") # ?? wtf?
boxplot( decostand( Fauna, method = 'normalize' )   , main = "normalized")
with(SECC.sp.sum, plotMeans(Richness, Chamber, Pos, error.bars="conf.int", level=0.95) )
with(SECC.sp.sum, plotMeans(Richness, Chamber, Frag, error.bars="conf.int", level=0.95) )
}
str(SECC.sp.sum)
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
Y.lim <- c(-5, 10)
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
str(SEC.df)
str(SECC.df)
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
Y.lim <- c(-1, 2)
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
Y.lim <- c(-1, 10)
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
Y.lim <- c(-5, 10)
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
source("/tmp/r-plugin-jaw/Rsource-22084-Fauna-univariate.R")
