source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
prob_obs
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
binom_sim_plot
  cold_adapt_data = read.csv("http://goo.gl/np42L")
par(mfrow=c(1,2),pty="s")
plot(cold_adapt_data$mass, cold_adapt_data$fat)
abline(lm(fat~mass, data=cold_adapt_data))
plot(cold_adapt_data$mass, cold_adapt_data$stored)
abline(lm(stored~mass, data=cold_adapt_data))
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
summary(sat_linear_reg)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
summary(sat_linear_reg)
summary(fat_nonlinear_reg)
summary(stored_linear_reg)
summary(stored_nonlinear_reg)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
prob_fat
prob_stored
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
linear_kelp_sims = list(original_data = kelp_data)
for(i in 1:15){
  test_name = paste("test",i, sep="")
  sim_urchin = kelp_data$urchin_density
  sim_kelp = rnorm(n_kelp, mean = fitted(kelp_linear),sd = kelp_sd)
  linear_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
                                              kelp_density= sim_kelp)
}
linear_kelp_sims = ldply(linear_kelp_sims)
linear_kelp_plot = ggplot(data=linear_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point() + facet_wrap(~.id) +
stat_smooth(method = "lm",se=F, size=1.5)+
stat_smooth(se=F, colour="red", size=1.5)
show(linear_kelp_plot)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
abline(lm(kelp_density~urchin_density, data=kelp_data[1:40, ]))
plot(kelp_data$urchin_density, kelp_data$kelp_density)
abline(lm(kelp_density~urchin_density, data=kelp_data[1:40, ]))
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
zinf_kelp_sims = list(original_data = kelp_data)
for(i in 1:15){
  test_name = paste("test",i, sep="")
  sim_urchin = kelp_data$urchin_density
  sim_kelp = rnorm(n_kelp, mean = kelp_pos_dens,sd = kelp_sd_pos)
  sim_kelp = sim_kelp*rbinom(n_kelp, size=1, prob = kelp_prob)
  zinf_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
                                              kelp_density= sim_kelp)
}
zinf_kelp_sims = ldply(zinf_kelp_sims)
zinf_kelp_plot = ggplot(data=zinf_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point()+ facet_wrap(~.id) +
stat_smooth(method = "lm",se=F, size=1.5)+
stat_smooth(se=F, colour="red", size=1.5)
show(zinf_kelp_plot)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
install.packages("glmulti")
library(glmulti)
help,start()
help.start()
x = "foo"
load("/Users/jaw/Desktop/workspace")
ls()
assign("x", 3)
x
?log
x <- 10^-(1+2*1:9)#
cbind(x, log(1+x), log1p(x), exp(x)-1, expm1(x))
help.start()
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
source('./lib/init.R')
library(lattice)
library(ggplot2)
library(lme4)
X.col <- 'Cells.m'   # Column to analyze as explanatory variable        *****
Y.col <- 'ARA.m'     # Column to analyze as response variable           *****
vars.ls   <- c("ARA.m", "Cells.m", "Hcells.m", "H2O")  # for data exploration?
Time.use     <- levels(SECC$Time)      # Time (index: 1-3) to include in this run
Chamber.use  <- levels(SECC$Chamber)[c(1, 3)]      # Chamber treatments to include
Frag.use     <- levels(SECC$Frag)         # Frag treatments to include
Position.use <- levels(SECC$Position)[c(1, 3)]     # Patch Positions to include
Save.results  <- FALSE
SECC.prime <- SECC    # save a copy of the original for reference.
sampleA  <- 6   # sample Area, in cm^2:  pi * (2.75/2)^2 ; pi * (2.8 / 2)^2
sample.to.m2 <- (100*100)/sampleA   # scale sample area, in cm^2 to m^2
sample_ml    <- 50  # 50 ml sample
ARA.m2   <- sampleA/(100*100)  # ARA sample area,   in (cm^2 to) m^2
patchA   <- pi * (12.5^2)      # patch area
patch.m2 <- patchA/(100*100)   # patch sample area, in (cm^2 to) m^2
Nfix.ARA.ratio <- 1/3  # ratio of N-fixation : ARA.
SECC <- within( SECC, {
  ARA.ml[ARA.ml < 0] <- 0
  ARA.m[ ARA.m  < 0] <- 0
  ARA.g[ ARA.g  < 0] <- 0
  Nfix <- ARA.m * Nfix.ARA.ratio
  H2O <- H2O * 100
  H2O.wwt <- H2O.wwt * 100
})
X.label <- attr(SECC, "labels")[[X.col]]  # explanatory variable label
X.units <- attr(SECC, "units" )[[X.col]]  # explanatory variable units
Y.label <- attr(SECC, "labels")[[Y.col]]  # response variable label
Y.units <- attr(SECC, "units" )[[Y.col]]  # response variable units
X.plotlab <- bquote( .(X.label) * "  " * .(X.units) *  "" )
Y.plotlab <- bquote( .(Y.label) * "  " * .(Y.units) *  "" )
labels.ls <- c()
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  labels.ls[i] <- attr(SECC, "labels")[[var]]
}
Save.filename <- paste("Results - ", Y.col, "~" , X.col, " - ",
                       paste(which(levels(SECC$Time) == Time.use), collapse=""),
                       sep = ""
                   )
Save.text  <- paste("./output/", Save.filename, ".txt", sep = "")
Save.plots <- paste("./graphs/", Save.filename, ".pdf", sep = "")
Save.final <- Save.plots              # Destination for final plots.
Save.divider <-        "================================================================\n"
Save.header  <- paste( "GLM Results for:", Y.label, "(", Y.col, ")",
                     "\n               ~", X.label, "(", X.col, ")",
                     "\nExpt. Time:   ", paste(Time.use,     collapse = ", "),
                     "\nChamber:      ", paste(Chamber.use,  collapse = ", "),
                     "\nFragmentation:", paste(Frag.use,     collapse = ", "),
                     "\nPatches:      ", paste(Position.use, collapse = ", "),
                     paste("\n\n", date(), "\n\n", Save.divider, sep = "")
                     )
Save.end      <- paste("\n",
					   "<============================= END ============================>",
						sep = "\n"
					  )
SECC.use <- SECCclean(SECC, Time.use, Chamber.use, Frag.use, Position.use)
SECCp  <- if (FALSE)  SECC_aggregate( SECC.use, trt = 'Position' )  else SECC.use
SECCmc <- SECC_aggregate( SECC.use, trt = 'Frag' )
SECC.scale  <- "patch"  # c("patch", "mc")
SECCa <- if(SECC.scale == "patch") SECCp else if (SECC.scale == "mc") SECCmc else SECC
SECCa <- within( SECCa, {
                X <- as.numeric( get(X.col) )
                Y <- as.numeric( get(Y.col) )
                Y.use <- Y  # compatibility with older code
})
if (FALSE) {  # do not run if source()d
  head(SECCa)     # have a peek at the first 6 rows & columns: is this what you expected?
  str( SECCa)     # check structure: are the appropriate variables factors, numeric, etc.?
  summary(SECCa)  # summary statistics
}
if (Save.results == TRUE && is.null(Save.plots) == FALSE) pdf( file = Save.plots )
Chamber.map <- plotMap( "Chamber", labels = levels(SECC$Chamber) )
Chamber.map <- Chamber.map[ levels(SECC$Chamber) %in% Chamber.use, ]
Chamber.map$label <- factor(Chamber.map$label)
point <- 21	# 21 for circles with col & bg ; 16 for solid circles
Chamber.map$pch <- c(21, 16)  # use circles for both treatments
SECCa <- within( SECCa,{
	colr = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$col[1],
			Chamber.map$col[2]
		)
	fill = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$bg[1],
			Chamber.map$bg[2]
		)
	pt = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$pch[1],
			Chamber.map$pch[2]
		)
})
with( SECCa,{
	plot(X, Y, type="p",
		ylab=Y.plotlab, xlab=X.plotlab,
		pch=pt, col=colr
	)
	legend("topright", legend=Chamber.map$label,
           pch=Chamber.map$pch, col=Chamber.map$col
    )
})
old.par <- par(mfcol=c(2,2))
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  label <- labels.ls[i]
  with( SECCa,{
        X.var <- get(var)
        X.max  <- max( X.var )
        freq.max <- length(X.var)/2
        X.maxD <- max( density( X.var )$y )*1.5
        for(Ch.trt in levels(Chamber)){
          X.trt <- X.var[Chamber==Ch.trt]
          X.density <- density( X.trt )
          hist( X.trt,
               main=Ch.trt, xlab=label,
               xlim=c(0, X.max),
               ylim=c(0, freq.max),
               breaks=seq( 0, X.max, length.out=16 ),
               col="#CCCCCC"
               )
          plot( X.density,
               main=Ch.trt, xlab=label,
               xlim=c(0, X.max),
               ylim=c(0, X.maxD)
               )
          densityplot( X.trt,
                      main=Ch.trt, xlab=label,
                      xlim=c(0, max( X.var ) )
                      )	# ** TRELLIS plot
        }
    })
}
par(old.par)
coplot( Y ~ X | Frag * Position, data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg=Chamber.map$bg
)	# why does recycling Chamber.map work for bg, but not col?
coplot( Y ~ X | Chamber * Frag , data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg= Chamber.map$bg
)
coplot( Y ~ X | Chamber * Position , data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg= Chamber.map$bg
)
coplot( Y ~ H2O | Frag * Position , data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg= Chamber.map$bg
)
qplot(X, Y, data = SECCa, color = Chamber, shape = Chamber, facets = Position*Frag ~ Time) + theme_bw() +
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
qplot(log(X+1), Y, data = SECCa, color = Chamber, shape = Chamber, facets = Position ~ Time) + theme_bw() +
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
qplot(H2O, Y, data = SECCa, color = Chamber, shape = Chamber, fill = Chamber, facets = Position*Frag ~ Time) + theme_bw() + # log = "y",
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_fill_manual(name = "Chamber", values = Chamber.map$bg, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
  Y.formula <- Y ~ log(X+1) * Time * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
Y.model.full <- Y.model
Y.model.main <- glm(Y ~ log(X+1) + Time + Chamber + Frag + Position + H2O, data = SECCa)
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Model.resid <- resid(Y.model)
hist(Model.resid)    # plot residuals
plot(SECCa$X, Model.resid)
plot(SECCa$H2O, Model.resid)
qplot(Frag, Model.resid, data = SECCa, facets = Chamber * Position ~ Time ) + theme_bw()
Y.model <- glm( Y.formula, data=SECCa, family="quasipoisson" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Model.resid <- resid(Y.model)
hist(Model.resid)    # plot residuals
plot(SECCa$X, Model.resid)
plot(SECCa$H2O, Model.resid)
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
qplot(log(X+1), log(Y+1), data = SECCa, color = Chamber, shape = Chamber, facets = Position ~ Time) + theme_bw() +
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
