envt<-envt0
res0<-matrix(0,numCom,1)
res0[,]<-10 #initial resource abundance
res<-res0
Rt<-res
initM<-cbind(envt0,res0,N0)
NdataM<-initM
init<-c(envt0,res0,N0) #monster vector of initial conditions
Ndata<-init
#initialize environment asynchronously (different phase) between 0 and 1 within sin wave
#make mod function
mod<-function(x,m)
{
  t1<-floor(x/m)
  return(x-t1*m)
}
envtini<-matrix(0,1,numCom)
for(j in 1:numCom)
    if(mod(j,2)==0) # half the communities have environments going in opposite directions to enable asynchrony over entire period, instead of only half the sin wave.
        {envtini[j] <- pi - asin((2*(eOptimum[j]/eAMP)) -1)
        } else{envtini[j] <- asin((2*(eOptimum[j]/eAMP)) -1)
        }
consume<-matrix(0,numCom,numSp)
migrants<-matrix(0,numCom,numSp)
#ODE System - no idea what this is - ask Jon
for(t in 1:Tmax){
  for(i in 1:numSp){
    migrants[,i]<-sum(N[,i]) #important to do this BEFORE updating dynamics, otherwise values will update in an inappropriate order
    for(j in 1:numCom){
      migrants[j,i]<-migrants[j,i] - N[j,i] #important to do this BEFORE updating dynamics, otherwise values will update in an inappropriate order
      }
      #model - not sure if part after extinction Threshold should be in this loop
      for(j in 1:numCom){
        envt[j]<-((sin(envtini[j] + 2*pi*t/ePeriod)+1)/2)*eAMP #Environmental state at current timestep [* Amplitude]
        for(i in 1:numSp){
          consume[j,i]<-(1.5 - abs(eOptimum[i] - envt[j]))/10
          Nt[j,i] <- N[j,i] +( (eff*consume[j,i]*res[j] - mort)*N[j,i] + disp*( migrants[j,i]/(numCom-1) ) - disp*N[j,i] ) *DT # Consumers + dispersal
          }
          Rt[j] = res[j] + (rInput - rLoss*res[j] - res[j] * (sum(consume[j,]*N[j,]) ) )*DT # Resources
      }
      Nextinct<- Nt>Ext #Extinction threshold
      N<-Nt*Nextinct;   # set N to new value - multiply each item in the matrix by either 1 (not extinct) or 0(extinct)
      res<- Rt # set res to new value
      #Com1<-matrix(NA, nrow=Tmax, ncol=numSp)
      #Com1[t,]<-N[,1] #attempt to get community 1 to print out - one row for each time step
      #DataRow<-c(envt,res,N)
      #Ndata[t,]<-DataRow #Store Output for this timestep
}
plot(Com1[,1]~Tdata)
N
str(Com)
ls()
str(Nt)
str(Tdata)
str(Ndata)
N[,]<-10 #I think this is equivalent to what Jon wrote N(:,:) - Initial Species Abundances
N
N[,1}
N[,]
N[,1]
source("/tmp/r-plugin-jaw/Rsource-34856-SIH2.0.R")
ls()
str(N)
N
source("/tmp/r-plugin-jaw/Rsource-34856-SIH2.0.R")
plot(Com1[,1]~Tdata, type='line')
plot(Com1[,1]~Tdata, type='l')
getwd()  # Check that we're in the right place
?seq
source("/tmp/r-plugin-jaw/Rsource-49287-SIH2.02.R")
par(mfrow=c(3,1))#
#
plot(Com1[,1]~Tdata, type='l', ylim=c(0,100), main=disp)#
for(i in 2:numSp){#
  lines(Com1[,i]~Tdata, col=i)#
  }#
  #
plot(Env1[,1]~Tdata, type='l', main="Environment")#
#for(i in 2:numSp){#
    #lines(Env1[,i]~Tdata, col=i)#
    #}#
#
plot(consume1[,1]~Tdata, type='l', main="consume")
str(Com1)
> plot(Com1[,]~Tdata, type='l', ylim=c(0,100), main=disp)
 plot(Com1[,]~Tdata, type='l', ylim=c(0,100), main=disp)
 plot(Com1, type='l', ylim=c(0,100), main=disp)
 plot( Tdata, Com1, type='l', ylim=c(0,100), main=disp)
?xy.plot
?plot.xy
?plot.ts
?plot
?plotmap
??plotmap
mod(7, 2)
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
  getwd()  # Check that we're in the right place
source('./lib/init.R')
library(lattice)
X.col <- 'Cells.m'   # Column to analyze as explanatory variable        *****
Y.col <- 'ARA.m'     # Column to analyze as response variable           *****
vars.ls   <- c("ARA.m", "Cells.m", "Hcells.m")  # for data exploration?
Time.use     <- levels(SECC$Time)[1]      # Time (index: 1-3) to include in this run
Chamber.use  <- levels(SECC$Chamber)[c(1, 3)]      # Chamber treatments to include
Frag.use     <- levels(SECC$Frag)         # Frag treatments to include
Position.use <- levels(SECC$Position)[c(1, 3)]     # Patch Positions to include
Save.results  <- FALSE
SECC.prime <- SECC    # save a copy of the original for reference.
sampleA  <- 6   # sample Area, in cm^2:  pi * (2.75/2)^2 ; pi * (2.8 / 2)^2
sample.to.m2 <- (100*100)/sampleA   # scale sample area, in cm^2 to m^2
sample_ml    <- 50  # 50 ml sample
ARA.m2   <- sampleA/(100*100)  # ARA sample area,   in (cm^2 to) m^2
patchA   <- pi * (12.5^2)      # patch area
patch.m2 <- patchA/(100*100)   # patch sample area, in (cm^2 to) m^2
Nfix.ARA.ratio <- 1/3  # ratio of N-fixation : ARA.
SECC <- within( SECC, {
  ARA.ml[ARA.ml < 0] <- 0
  ARA.m[ ARA.m  < 0] <- 0
  ARA.g[ ARA.g  < 0] <- 0
  Nfix <- ARA.m * Nfix.ARA.ratio
})
X.label <- attr(SECC, "labels")[[X.col]]  # explanatory variable label
X.units <- attr(SECC, "units" )[[X.col]]  # explanatory variable units
Y.label <- attr(SECC, "labels")[[Y.col]]  # response variable label
Y.units <- attr(SECC, "units" )[[Y.col]]  # response variable units
X.plotlab <- bquote( .(X.label) * "  " * .(X.units) *  "" )
Y.plotlab <- bquote( .(Y.label) * "  " * .(Y.units) *  "" )
labels.ls <- c()
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  labels.ls[i] <- attr(SECC, "labels")[[var]]
}
Save.filename <- paste("Results - ", Y.col, "~" , X.col, " - ",
                       paste(which(levels(SECC$Time) == Time.use), collapse=""),
                       sep = ""
                   )
Save.text  <- paste("./output/", Save.filename, ".txt", sep = "")
Save.plots <- paste("./graphs/", Save.filename, ".pdf", sep = "")
Save.final <- Save.plots              # Destination for final plots.
Save.divider <-        "================================================================\n"
Save.header  <- paste( "GLM Results for:", Y.label, "(", Y.col, ")",
                     "\n               ~", X.label, "(", X.col, ")",
                     "\nExpt. Time:   ", paste(Time.use,     collapse = ", "),
                     "\nChamber:      ", paste(Chamber.use,  collapse = ", "),
                     "\nFragmentation:", paste(Frag.use,     collapse = ", "),
                     "\nPatches:      ", paste(Position.use, collapse = ", "),
                     paste("\n\n", date(), "\n\n", Save.divider, sep = "")
                     )
Save.end      <- paste("\n",
					   "<============================= END ============================>",
						sep = "\n"
					  )
SECC.use <- SECCclean(SECC, Time.use, Chamber.use, Frag.use, Position.use)
SECCp  <- if (FALSE)  SECC_aggregate( SECC.use, trt = 'Position' )  else SECC.use
SECCmc <- SECC_aggregate( SECC.use, trt = 'Frag' )
SECC.scale  <- "patch"  # c("patch", "mc")
SECCa <- if(SECC.scale == "patch") SECCp else if (SECC.scale == "mc") SECCmc else SECC
SECCa <- within( SECCa, {
                X <- as.numeric( get(X.col) )
                Y <- as.numeric( get(Y.col) )
                Y.use <- Y  # compatibility with older code
})
if (FALSE) {  # do not run if source()d
  head(SECCa)     # have a peek at the first 6 rows & columns: is this what you expected?
  str( SECCa)     # check structure: are the appropriate variables factors, numeric, etc.?
  summary(SECCa)  # summary statistics
}
if (Save.results == TRUE && is.null(Save.plots) == FALSE) pdf( file = Save.plots )
Chamber.map <- plotMap( "Chamber", labels = levels(SECC$Chamber) )
Chamber.map <- Chamber.map[ levels(SECC$Chamber) %in% Chamber.use, ]
Chamber.map$label <- factor(Chamber.map$label)
point <- 21	# 21 for circles with col & bg ; 16 for solid circles
Chamber.map$pch <- c(21, 16)  # use circles for both treatments
SECCa <- within( SECCa,{
	colr = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$col[1],
			Chamber.map$col[2]
		)
	fill = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$bg[1],
			Chamber.map$bg[2]
		)
	pt = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$pch[1],
			Chamber.map$pch[2]
		)
})
with( SECCa,{
	par(mfrow=c(1,1))
	plot(X, Y, type="p",
		ylab=Y.plotlab, xlab=X.plotlab,
		pch=pt, col=colr
	)
	legend("topright", legend=Chamber.map$label,
           pch=Chamber.map$pch, col=Chamber.map$col
    )
})
par(mfcol=c(2,2))
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  label <- labels.ls[i]
  with( SECCa,{
        X.var <- get(var)
        X.max  <- max( X.var )
        freq.max <- length(X.var)/2
        X.maxD <- max( density( X.var )$y )*1.5
        for(Ch.trt in levels(Chamber)){
          X.trt <- X.var[Chamber==Ch.trt]
          X.density <- density( X.trt )
          hist( X.trt,
               main=Ch.trt, xlab=label,
               xlim=c(0, X.max),
               ylim=c(0, freq.max),
               breaks=seq( 0, X.max, length.out=16 ),
               col="#CCCCCC"
               )
          plot( X.density,
               main=Ch.trt, xlab=label,
               xlim=c(0, X.max),
               ylim=c(0, X.maxD)
               )
          densityplot( X.trt,
                      main=Ch.trt, xlab=label,
                      xlim=c(0, max( X.var ) )
                      )	# ** TRELLIS plot
        }
    })
}
coplot( Y ~ X | Frag * Position, data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg=Chamber.map$bg
)	# why does recycling Chamber.map work for bg, but not col?
coplot( Y ~ X | Chamber * Frag , data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg= Chamber.map$bg
)
xyplot( Y ~ X | Chamber * Frag * Position, data=SECCa,
       pch=point, col=SECCa$colr, bg = SECCa$fill
)
xyplot( Y ~ X | Chamber * Frag , data=SECCa, col=1
)
if ( length(Time.use) > 1 ) {
  Y.formula <- Y ~ X*Time*Chamber*Frag*Position
} else {
  Y.formula <- Y ~ X * Chamber * Frag * Position
}
Y.model <- glm( Y.formula, data=SECCa, family="quasipoisson" )
par(mfrow=c(2,2))	    # panel of figures: 3 rows & 2 columns
plot(Y.model)
Model.resid <- resid(Y.model)
par(mfrow=c(1,1))	    # panel of figures: 3 rows & 2 columns
hist(Model.resid)    # plot residuals
resid(Y.model)
coplot( Model.resid ~ X | Frag * Position, data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg=Chamber.map$bg
)
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-2616-ARA~cyanobacteria.R")
