?plot
?plotmap
??plotmap
?eps
??eps
?pdf
?postscript
help("setEPS")
cite()
citation()
citation(ggplot2)
citation("ggplot2")
citation("lme4")
citation("reshape")
citation("Rcmdr")
packages()
help.start()
install.packages("Rcmdr")
citation("Rcmdr")
require(ggplot2)
require(mgcv)
n=1000  ## Number of samples to draw (you can change this if you want)
par(mfrow=c(1,2),pty='s') ## Graphical parameters
x<-rnorm(n,mean=0,sd=1)
plot(x,main='random draws from \n a standard normal') ## Here are all the randomly sampled points
hist(x,probability=TRUE)                              ## A histogram of the samples
curve(dnorm(x,mean=0,sd=1),add=TRUE)                  ## Overlay the pdf to convince ourselves that the points were
x<-rbeta(n,7,2)
plot(x,main='random draws \n from a beta distribution')
hist(x,probability=TRUE)
curve(dbeta(x,7,2),add=TRUE)
x<-rlnorm(n,0,1)
plot(x,main='random draws \n from a log-Normal distribution')
hist(x,probability=TRUE)
curve(dlnorm(x,0,1),add=TRUE)
x<-rexp(n,0.1)
plot(x,main='random draws \n from an exponential distribution')
hist(x,probability=TRUE)
curve(dexp(x,0.1),add=TRUE)
x<-rpois(n,3)
plot(x,main='random draws \n from a Poisson distribution')
hist(x,probability=TRUE,breaks=seq(-0.5,max(x)+0.5,1))
lines(0:10,dpois(0:10,3))
x<-rchisq(n,3)
plot(x,main='random draws \n from a chi-squared distribution')
hist(x,probability=TRUE)
curve(dchisq(x,3),add=TRUE)
x<-rbinom(n,10,0.5)
plot(x,main='random draws \n from a chi-squared distribution')
hist(x,probability=TRUE, breaks=seq(10.5,-0.5,-1))
lines(0:10, dbinom(0:10,10,0.5))
plot(x,main='random draws \n from a binomial distribution')
hist(x,probability=TRUE, breaks=seq(10.5,-0.5,-1))
lines(0:10, dbinom(0:10,10,0.5))
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
n=100  ## Number of samples to draw (you can change this if you want)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
n=1000  ## Number of samples to draw (you can change this if you want)
par(mfrow=c(1,2),pty='s') ## Graphical parameters
n=200  ## Number of samples to draw (you can change this if you want)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
beanbag_data = read.csv("http://goo.gl/6ex0N")
beanbag_data
ggplot(data = beanbag_data, aes(x = bag)) +
    geom_histogram(binwidth=0.25)
beanbag_prob = mean(beanbag_data$bag)/10
beanbag_n = nrow(beanbag_data)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
ggplot(data = beanbag_data, aes(x = bag)) +
    geom_histogram(binwidth=0.25)
beanbag_prob = mean(beanbag_data$bag)/10
beanbag_n = nrow(beanbag_data)
rbinom(beanbag_n, size = 10, prob = beanbag_prob)
beanbag_data
beanbag_data = read.csv("http://goo.gl/6ex0N")
beanbag_data
beanbag_data = read.csv("http://goo.gl/6ex0N")
beanbag_data
ggplot(data = beanbag_data, aes(x = bag)) +
    geom_histogram(binwidth=0.25)
beanbag_prob = mean(beanbag_data$bag)/10
beanbag_n = nrow(beanbag_data)
rbinom(beanbag_n, size = 10, prob = beanbag_prob)
binom_proportions = rep(0, 5000)
for(i in 1:5000){               #the basic procedure is to draw new random samples from our model and fit the test statistic several thousand times
  test_sim_binom = rbinom(beanbag_n, size = 10, beanbag_prob)
  binom_proportions[i] =  mean(test_sim_binom)/10
}
test_se = sd(binom_proportions)
obs_se = sd(beanbag_data$bag/10)/sqrt(beanbag_n)
test_stat = obs_se - test_se
test_se
obs_se
test_stat = obs_se - test_se        # generic test statistic
test_stat
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
prob_obs
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
binom_sim_plot
  cold_adapt_data = read.csv("http://goo.gl/np42L")
par(mfrow=c(1,2),pty="s")
plot(cold_adapt_data$mass, cold_adapt_data$fat)
abline(lm(fat~mass, data=cold_adapt_data))
plot(cold_adapt_data$mass, cold_adapt_data$stored)
abline(lm(stored~mass, data=cold_adapt_data))
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
summary(sat_linear_reg)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
summary(sat_linear_reg)
summary(fat_nonlinear_reg)
summary(stored_linear_reg)
summary(stored_nonlinear_reg)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
prob_fat
prob_stored
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
linear_kelp_sims = list(original_data = kelp_data)
for(i in 1:15){
  test_name = paste("test",i, sep="")
  sim_urchin = kelp_data$urchin_density
  sim_kelp = rnorm(n_kelp, mean = fitted(kelp_linear),sd = kelp_sd)
  linear_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
                                              kelp_density= sim_kelp)
}
linear_kelp_sims = ldply(linear_kelp_sims)
linear_kelp_plot = ggplot(data=linear_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point() + facet_wrap(~.id) +
stat_smooth(method = "lm",se=F, size=1.5)+
stat_smooth(se=F, colour="red", size=1.5)
show(linear_kelp_plot)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
abline(lm(kelp_density~urchin_density, data=kelp_data[1:40, ]))
plot(kelp_data$urchin_density, kelp_data$kelp_density)
abline(lm(kelp_density~urchin_density, data=kelp_data[1:40, ]))
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
zinf_kelp_sims = list(original_data = kelp_data)
for(i in 1:15){
  test_name = paste("test",i, sep="")
  sim_urchin = kelp_data$urchin_density
  sim_kelp = rnorm(n_kelp, mean = kelp_pos_dens,sd = kelp_sd_pos)
  sim_kelp = sim_kelp*rbinom(n_kelp, size=1, prob = kelp_prob)
  zinf_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
                                              kelp_density= sim_kelp)
}
zinf_kelp_sims = ldply(zinf_kelp_sims)
zinf_kelp_plot = ggplot(data=zinf_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point()+ facet_wrap(~.id) +
stat_smooth(method = "lm",se=F, size=1.5)+
stat_smooth(se=F, colour="red", size=1.5)
show(zinf_kelp_plot)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
install.packages("glmulti")
library(glmulti)
help,start()
help.start()
x = "foo"
load("/Users/jaw/Desktop/workspace")
ls()
assign("x", 3)
x
?log
x <- 10^-(1+2*1:9)#
cbind(x, log(1+x), log1p(x), exp(x)-1, expm1(x))
help.start()
samples <- seq(1, 60)
?rep
rep(samples, each = 2)
rep(samples, each = 2) -> samples
data.frame(samples)
samples
?print
?format
sprintf(samples)
sprintf(as.character(samples))
sprintf(paste("%0",samples, sep=""))
sprintf("%0",samples)
sprintf("%02",samples)
sprintf("%0d",samples)
sprintf("%02d",samples)
sprintf("%02d",samples) -> samples
as.data.frame(samples)
print(samples)
print(samples, quote = FALSE)
print(samples, quote = FALSE, index = FALSE)
print(samples, quote = FALSE, row.names = FALSE)
print(as.data.frame(samples), quote = FALSE, row.names = FALSE)
print(as.data.frame(samples), quote = FALSE, row.names = FALSE, alignment = "left")
print(as.data.frame(samples), quote = FALSE, row.names = FALSE, col.names = FALSE)
print(as.data.frame(x=samples), quote = FALSE, row.names = FALSE, col.names = FALSE)
print(data.frame(x=samples), quote = FALSE, row.names = FALSE, col.names = FALSE)
source("/tmp/r-plugin-jaw/Rsource-1810-ARA~cyanobacteria.R")
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
source("/tmp/r-plugin-jaw/Rsource-1810-ARA~cyanobacteria.R")
str(SECCa)
invisible(edit(SECCa)
)
plot(SECC[, c("ARA.m", "ARA.g", "H2O", "Cells.m", "Cells.g", "Hcells.m", "Hcells.g", "Stigonema", "Nostoc" )])
Chamber.map <- plotMap( "Chamber", labels = levels(SECC$Chamber) )
Chamber.map <- Chamber.map[ levels(SECC$Chamber) %in% Chamber.use, ]
Chamber.map$label <- factor(Chamber.map$label)
point <- 21	# 21 for circles with col & bg ; 16 for solid circles
Chamber.map$pch <- c(21, 16)  # use circles for both treatments
SECCa <- within( SECCa,{
	colr = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$col[1],
			Chamber.map$col[2]
		)
	fill = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$bg[1],
			Chamber.map$bg[2]
		)
	pt = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$pch[1],
			Chamber.map$pch[2]
		)
})
with( SECCa,{
	plot(X, Y, type="p",
		ylab=Y.plotlab, xlab=X.plotlab,
		pch=pt, col=colr
	)
	legend("topright", legend=Chamber.map$label,
           pch=Chamber.map$pch, col=Chamber.map$col
    )
})
old.par <- par(mfcol=c(2,2))
par(old.par)
qplot(X, Y, data = SECCa, color = Chamber, shape = Chamber, facets = Position*Frag ~ Time) + theme_bw() +
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
qplot(log(X+1), log(Y+1), data = SECCa, color = Chamber, shape = Chamber, facets = Position ~ Time) + theme_bw() +
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
qplot(log(X+1), Y, data = SECCa, color = Chamber, shape = Chamber, facets = Position ~ Time) + theme_bw() +
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
qplot(log(X+1), Y, data = SECCa, color = Chamber, shape = Chamber, facets = Position ~ Time) + theme_bw() +
scale_shape_manual(name = "Chamber", values = Chamber.map$pch, breaks = Chamber.map$label, labels = c("Ambient", "Chamber")) +
scale_color_manual(name = "Chamber", values = Chamber.map$col, breaks = Chamber.map$label, labels = c("Ambient", "Chamber"))
O
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
Y.model.full <- Y.model
Y.model.main <- glm(Y ~ log(X+1) + Time + Chamber + Frag + Position + H2O + I(H2O^2), data = SECCa)
Y.model.selected <- step(Y.model, direction = "backward")
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
  Y.formula <- Y ~ log(X+1) * Time * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
Y.model.full <- Y.model
Y.model.main <- glm(Y ~ log(X+1) + Time + Chamber + Frag + Position + H2O + I(H2O^2), data = SECCa)
Y.model.selected <- step(Y.model, direction = "backward")
summary(Y.model.full)
