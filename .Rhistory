patchA   <- pi * (12.5^2)      # patch area
patch.m2 <- patchA/(100*100)   # patch sample area, in (cm^2 to) m^2
Nfix.ARA.ratio <- 1/3  # ratio of N-fixation : ARA.
SECC <- within( SECC, {
  ARA.ml[ARA.ml < 0] <- 0
  ARA.m[ ARA.m  < 0] <- 0
  ARA.g[ ARA.g  < 0] <- 0
  Nfix <- ARA.m * Nfix.ARA.ratio
})
X.label <- attr(SECC, "labels")[[X.col]]  # explanatory variable label
X.units <- attr(SECC, "units" )[[X.col]]  # explanatory variable units
Y.label <- attr(SECC, "labels")[[Y.col]]  # response variable label
Y.units <- attr(SECC, "units" )[[Y.col]]  # response variable units
X.plotlab <- bquote( .(X.label) * "  " * .(X.units) *  "" )
Y.plotlab <- bquote( .(Y.label) * "  " * .(Y.units) *  "" )
labels.ls <- c()
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  labels.ls[i] <- attr(SECC, "labels")[[var]]
}
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
SECC.use <- SECCclean(SECC, Time.use, Chamber.use, Frag.use, Position.use)
SECCp  <- SECC_aggregate( SECC.use, trt = 'Position' )
SECCmc <- SECC_aggregate( SECC.use, trt = 'Frag' )
SECC.scale  <- "patch"  # c("patch", "mc")
SECCa <- if(SECC.scale == "patch") SECCp else if (SECC.scale == "mc") SECCmc else SECC
SECCa <- within( SECCa, {
                X <- as.numeric( get(X.col) )
                Y <- as.numeric( get(Y.col) )
                Y.use <- Y  # compatibility with older code
})
Chamber.map <- plotMap( "Chamber", labels = levels(SECC$Chamber) )
Chamber.map <- Chamber.map[ levels(SECC$Chamber) %in% Chamber.use, ]
Chamber.map$label <- factor(Chamber.map$label)
point <- 21	# 21 for circles with col & bg ; 16 for solid circles
SECCa <- within( SECCa,{
	colr = ifelse( Chamber == Chamber.map$label[1],
			as.character(Chamber.map$col[1]),
			as.character(Chamber.map$col[2])
		)
	fill = ifelse( Chamber == Chamber.map$label[1],
			as.character(Chamber.map$bg[1]),
			as.character(Chamber.map$bg[2])
		)
	pt = ifelse( Chamber == Chamber.map$label[1],
			Chamber.map$pch[1],
			Chamber.map$pch[2]
		)
})
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
names(SECCa)
length(vars.ls)
1:length(vars.ls)
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
par(mfcol=c(2,2))
## Check distributions
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  label <- labels.ls[i]
  with( SECCa,{
        X.var <- get(var)
        X.max  <- max( X.var )
        freq.max <- length(X.var)/2
        X.maxD <- max( density( X.var )$y )*1.5
        for(Ch.trt in levels(Chamber)){
          X.trt <- X.var[Chamber==Ch.trt]
          X.density <- density( X.trt )
          hist( X.trt,
               main=Ch.trt, xlab=label,
               xlim=c(0, X.max),
               ylim=c(0, freq.max),
               breaks=seq( 0, X.max, length.out=16 ),
               col="#CCCCCC"
               )
          abline( 5, 0, lty=3, col="#666666" ) # reference line
          plot( X.density,
               main=Ch.trt, xlab=label,
               xlim=c(0, X.max),
               ylim=c(0, X.maxD)
               )
          densityplot( X.trt,
                      main=Ch.trt, xlab=label,
                      xlim=c(0, max( X.var ) )
                      )	# ** TRELLIS plot
        }
    })
	# qqplot(x, y) to compare distributions.
}
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
max(SECCa$Hcells.m)
max(SECCa$Cells.m)
rm(list=ls())       # house-keeping
cat('Memory Cleared.\n')
if (FALSE) {  # do not run automatically
}
cat('Loading functions.\n')
source("./lib/fun.R")   # define functions
cat('Loading data.\n')
  source("./lib/load.R")  # (re-)load Data
  getwd()  # Check that we're in the right place
source('./lib/init.R')
X.col <- 'Cells.m'   # Column to analyze as explanatory variable        *****
Y.col <- 'ARA.m'     # Column to analyze as response variable           *****
vars.ls   <- c("ARA.m", "Cells.m", "Hcells.m")  # for data exploration?
Time.use     <- levels(SECC$Time)[1]      # Time (index: 1-3) to include in this run
Chamber.use  <- levels(SECC$Chamber)[c(1, 3)]      # Chamber treatments to include
Frag.use     <- levels(SECC$Frag)         # Frag treatments to include
Position.use <- levels(SECC$Position)[c(1, 3)]     # Patch Positions to include
Save.results  <- FALSE
SECC.prime <- SECC    # save a copy of the original for reference.
sampleA  <- 6   # sample Area, in cm^2:  pi * (2.75/2)^2 ; pi * (2.8 / 2)^2
sample.to.m2 <- (100*100)/sampleA   # scale sample area, in cm^2 to m^2
sample_ml    <- 50  # 50 ml sample
ARA.m2   <- sampleA/(100*100)  # ARA sample area,   in (cm^2 to) m^2
patchA   <- pi * (12.5^2)      # patch area
patch.m2 <- patchA/(100*100)   # patch sample area, in (cm^2 to) m^2
Nfix.ARA.ratio <- 1/3  # ratio of N-fixation : ARA.
SECC <- within( SECC, {
  ARA.ml[ARA.ml < 0] <- 0
  ARA.m[ ARA.m  < 0] <- 0
  ARA.g[ ARA.g  < 0] <- 0
  Nfix <- ARA.m * Nfix.ARA.ratio
})
X.label <- attr(SECC, "labels")[[X.col]]  # explanatory variable label
X.units <- attr(SECC, "units" )[[X.col]]  # explanatory variable units
Y.label <- attr(SECC, "labels")[[Y.col]]  # response variable label
Y.units <- attr(SECC, "units" )[[Y.col]]  # response variable units
X.plotlab <- bquote( .(X.label) * "  " * .(X.units) *  "" )
Y.plotlab <- bquote( .(Y.label) * "  " * .(Y.units) *  "" )
labels.ls <- c()
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  labels.ls[i] <- attr(SECC, "labels")[[var]]
}
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
SECC.use <- SECCclean(SECC, Time.use, Chamber.use, Frag.use, Position.use)
SECCp  <- SECC_aggregate( SECC.use, trt = 'Position' )
SECCmc <- SECC_aggregate( SECC.use, trt = 'Frag' )
SECC.scale  <- "patch"  # c("patch", "mc")
SECCa <- if(SECC.scale == "patch") SECCp else if (SECC.scale == "mc") SECCmc else SECC
SECCa <- within( SECCa, {
                X <- as.numeric( get(X.col) )
                Y <- as.numeric( get(Y.col) )
                Y.use <- Y  # compatibility with older code
})
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
SECCp  <- SECC.use  # SECC_aggregate( SECC.use, trt = 'Position' )
SECC.scale  <- "patch"  # c("patch", "mc")
SECCa <- if(SECC.scale == "patch") SECCp else if (SECC.scale == "mc") SECCmc else SECC
SECCa <- within( SECCa, {
                X <- as.numeric( get(X.col) )
                Y <- as.numeric( get(Y.col) )
                Y.use <- Y  # compatibility with older code
})
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
coplot( Y ~ X | Frag * Position, data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg=Chamber.map$bg
)	# why does recycling Chamber.map work for bg, but not col?
coplot( Y ~ X | Chamber * Frag , data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg= Chamber.map$bg
)
coplot( Y ~ X | Chamber * Frag , data=SECCa,
       pch=SECCa$pt, col=SECCa$colr	# , bg=SECC$fill
)
xyplot( Y ~ X | Chamber * Frag * Position, data=SECCa,
       pch=point, col=SECCa$colr, bg = SECCa$fill
)
xyplot( Y ~ X | Chamber * Frag , data=SECCa, col=1
)
Y.formula <- Y ~ X*Chamber*Frag*Position
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
Y.formula
Y.model <- glm( Y.formula, data=SECCa, family="quasipoisson" )
par(mfrow=c(3,2))	    # panel of figures: 3 rows & 2 columns
plot(Y.model)
hist(resid(Y.model))    # plot residuals
anova(Y.model)
summary(Y.model)
Y.pred 	<- expand.grid( Chamber=levels(SECC$Chamber) , Frag=levels(SECC$Frag), Position=levels(SECC$Position), cells_m2=seq(0, max(SECC$cells_m2), length.out=100 ) )
Y.pred 	<- expand.grid( Chamber=levels(SECCa$Chamber) , Frag=levels(SECCa$Frag), Position=levels(SECCa$Position), X=seq(0, max(SECCa$X), length.out=100 ) )
Y.pred$preds  <- predict(Y.model, newdata=Y.pred, type="response" )	# newdata must have same explanatory variable name for predict to work.
Y.pred 	<- expand.grid( Chamber=levels(SECCa$Chamber) , Frag=levels(SECCa$Frag), Position=levels(SECCa$Position), X=seq(0, max(SECCa$X), length.out=100 ) )
Y.pred$preds  <- predict(Y.model, newdata=Y.pred, type="response" )	# newdata must have same explanatory variable name for predict to work.
Y.pred$preds  <- predict(Y.model, newdata=Y.pred, type="response" )	# newdata must have same explanatory variable name for predict to work.
Chamber.map <- plotMap( "Chamber", labels = levels(SECC$Chamber) )
Chamber.map <- Chamber.map[ levels(SECC$Chamber) %in% Chamber.use, ]
Chamber.map$label <- factor(Chamber.map$label)
point <- 21	# 21 for circles with col & bg ; 16 for solid circles
par(mfrow=c(1,1))
with( SECC,{
	colr = ifelse(Chamber=="Ambient", Chamber.map$col[1], Chamber.map$col[2] )
	bg.colr = ifelse(Chamber=="Ambient", Chamber.map$bg[1], Chamber.map$bg[2] )
	plot(X, Y, type="p",
		ylab=Y.plotlab, xlab=X.plotlab,
		pch=point, col=colr, bg=bg.colr
	)
	lines(preds ~ X, data=subset(Y.pred, Chamber=="Ambient"), col= Chamber.map$col[1], lty= Chamber.map$lty[1])
	lines(preds ~ X, data=subset(Y.pred, Chamber=="Full Chamber"), col= Chamber.map$col[2], lty= Chamber.map$lty[2])
	legend( "topright", legend=Chamber.map$label, pch=point, col=as.character(Chamber.map$col), pt.bg=as.character(Chamber.map$bg) )
})
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
Chamber.map
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
class(Chamber.map$col)
class(Chamber.map$col[1])
as.character(Chamber.map$col[1])
?data.frame
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-SECC.functions.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
Chamber.map$pt <- c(21, 16)
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-42072-SECC-N-fix~cb.R")
source("/tmp/r-plugin-jaw/Rsource-42072-SECC-N-fix~cb.R")
source("/tmp/r-plugin-jaw/Rsource-42072-SECC-N-fix~cb.R")
etwd("/Users/jaw/Documents/ My Documents/ Academic/McGill/PhD/Analysis")
setwd("/Users/jaw/Documents/ My Documents/ Academic/McGill/PhD/Analysis")
source("/tmp/r-plugin-jaw/Rsource-42072-SECC-N-fix~cb.R")
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
 setwd("/Users/jaw/Documents/ My Documents/ Academic/McGill/PhD/Analysis")
setwd("/Users/jaw/Documents/ My Documents/ Academic/McGill/PhD/Analysis")
source("/tmp/r-plugin-jaw/Rsource-42072-SECC-N-fix~cb.R")
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
  getwd()  # Check that we're in the right place
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-24114-ARA~cyanobacteria.R")
  getwd()  # Check that we're in the right place
