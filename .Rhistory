###===============================================
## Note that Samples at different times are actually independent
## in this design, due to destructive sampling.
Time.use     <- levels(SECC$Time)      # Include *ALL* Times (as a Treatment)
source("./SECCanova/SECC - ANOVA labels.R", echo = FALSE) # Load default Labels. *****
source("./SECCanova/SECC - nested ANOVA.R", echo = FALSE) # RUN STANDARD nested ANOVA
### Schefferville Experiment on Climate Change (SEC-C)
### basic analyses of experimental data
### Cyanobacteria counts  @ time #s
### Jonathan Whiteley     R v2.12     2011-03-28
## INITIALISE
## This script is used in a generic way for most univariate analyses
## Set Working Directory: path in quotes "".
## setwd("/Users/jonathan/Documents/ My Documents/PhD/Analysis/ SECC/")    # iMac@McGill
## setwd("/Users/jaw/Documents/ My Documents/ Academic/McGill/PhD/Analysis/ SECC/")  # JAW-MBP
## setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
getwd()  # Check that we're in the right place
## Load data, functions, etc.  Includes rm(list=ls()) to clear memory
source('./lib/init.R')
## CONFIGURE BASIC ANALYSIS
### Response Variable *****
Y.col <- 'Hcells.m'     # Column to analyze as response variable           *****
Y.use <- 'Y.4rt'       # Which transformation is being used (for labels)? ****
### Load default settings (based on response variable) *****
source("./SECCanova/SECC - ANOVA settings.R", echo = FALSE)
##================================================
## CUSTOM SETTINGS
##================================================
## delete lines to use the defaults.
## Specify which treatment levels to include (by index is probably easiest)
Time.use     <- levels(SECC$Time)[1]            # Time (index: 1-3) to include in this run
Chamber.use  <- levels(SECC$Chamber)[c(1, 3)]   # Chamber treatments to include
Frag.use     <- levels(SECC$Frag)               # Frag treatments to include
Position.use <- levels(SECC$Position)[c(1, 3)]  # Patch Positions to include
## Define Labels
Y.units <- bquote( sqrt(.(Y.units), 4) )  # store as quote(expression) *****
## Output Results?
Save.results  <- TRUE
##================================================
## CUSTOM CALCULATIONS
##================================================
SECC.prime <- SECC    # save a copy of the original for reference.
## str(SECC)
sampleA  <- 6   # sample Area, in cm^2:  pi * (2.75/2)^2 ; pi * (2.8 / 2)^2
      #     6 for rough estimate of inner tube diameter (2.8 cm): pi*(2.8/2)^2,
      #  or 6.4 for 20 shoots, based on density survey.
sample.to.m2 <- (100*100)/sampleA   # scale sample area, in cm^2 to m^2
sample_ml    <- 50  # 50 ml sample
ARA.m2   <- sampleA/(100*100)  # ARA sample area,   in (cm^2 to) m^2
patchA   <- pi * (12.5^2)      # patch area
patch.m2 <- patchA/(100*100)   # patch sample area, in (cm^2 to) m^2
SECC <- within( SECC, {
    ## Calculations
})
### Load default Labels - dependent on above settings. *****
source("./SECCanova/SECC - ANOVA labels.R", echo = FALSE)
##================================================
## CUSTOM LABELS
##================================================
### RUN STANDARD nested ANOVA
### Run analysis on each Time point in sequence.
for ( Time.i in 1:length(levels(SECC$Time)) ) {
  ## Specify which treatment levels to include (by index is probably easiest)
  Time.use     <- levels(SECC$Time)[Time.i]      # Time (index: 1-3) to include in this run
  cat("\n\n\nProcessing Time:", Time.use, "\n")
  ## Load default Labels - dependent on above settings. *****
  source("./SECCanova/SECC - ANOVA labels.R", echo = FALSE)
  ## RUN STANDARD nested ANOVA
  source("./SECCanova/SECC - nested ANOVA.R", echo = FALSE)
}
###===============================================
### Include Time as a factor in nested ANOVA
###===============================================
## Note that Samples at different times are actually independent
## in this design, due to destructive sampling.
Time.use     <- levels(SECC$Time)      # Include *ALL* Times (as a Treatment)
source("./SECCanova/SECC - ANOVA labels.R", echo = FALSE) # Load default Labels. *****
source("./SECCanova/SECC - nested ANOVA.R", echo = FALSE) # RUN STANDARD nested ANOVA
source('./lib/init.R')
Y.col <- 'ARA.m'     # Column to analyze as response variable           *****
Y.use <- 'Y.sqrt'    # Which transformation is being used (for labels)? *****
source("./SECCanova/SECC - ANOVA settings.R", echo = FALSE)
Time.use     <- levels(SECC$Time)[1]      # Time (index: 1-3) to include in this run
Y.units <- bquote( sqrt(.(Y.units)) )     # store as quote(expression)  *****
Save.results  <- TRUE
SECC.prime <- SECC    # save a copy of the original for reference.
sampleA  <- 6   # sample Area, in cm^2:  pi * (2.75/2)^2 ; pi * (2.8 / 2)^2
sample.to.m2 <- (100*100)/sampleA   # scale sample area, in cm^2 to m^2
sample_ml    <- 50  # 50 ml sample
ARA.m2   <- sampleA/(100*100)  # ARA sample area,   in (cm^2 to) m^2
patchA   <- pi * (12.5^2)      # patch area
patch.m2 <- patchA/(100*100)   # patch sample area, in (cm^2 to) m^2
Nfix.ARA.ratio <- 1/3  # ratio of N-fixation : ARA.
SECC <- within( SECC, {
  ARA.ml[ARA.ml < 0] <- 0
  ARA.m[ ARA.m  < 0] <- 0
  ARA.g[ ARA.g  < 0] <- 0
  Nfix <- ARA.m * Nfix.ARA.ratio
})
source("./SECCanova/SECC - ANOVA labels.R", echo = FALSE)
str(SECC)
?abline
abline(0, 1))
abline(0, 1)
plot.new()
abline(0,1)
Save.results  <- FALSE
Time.use     <- levels(SECC$Time)[1]      # Time (index: 1-3) to include in this run
source("./SECCanova/SECC - ANOVA labels.R", echo = FALSE) # Load default Labels. *****
source("./SECCanova/SECC - nested ANOVA.R", echo = FALSE) # RUN STANDARD nested ANOVA
TukeyHSD( Yp.aov$Within )
TukeyHSD( Yp.aov )
plot(1:25, 1:25, pch = 1:25, lty = 1:5
)
is.na(c())
is.null(c())
plotMap( labels = levels(SECC$Chamber) )
source("/tmp/r-plugin-jaw/Rsource-1030-SECC.functions.R")
plotMap( labels = levels(SECC$Chamber) )
source("/tmp/r-plugin-jaw/Rsource-1030-ARA.R")
traceback()
source("/tmp/r-plugin-jaw/Rsource-1030-ARA.R")
traceback()
plot.means <- with( SECCp,
                   aggregate( cbind( Y.trans ),
                             list(Position = Position, Chamber = Chamber),
                             mean
                             )
                   )
with( plot.means, {
  plot.error <- matrix( as.numeric(lsd.CxP/2),
                       nrow = length(levels(Position)),
                       ncol = length(levels(Chamber))
                       )
  plotMeans( Y.trans, Chamber, Position,
            error.bars = "custom", level = plot.error, cex = 2, lwd = 2,
            lty = Position.map$lty, pch = Position.map$pch,
            col = as.character(Position.map$col),
            bg  = as.character(Position.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Chamber"]],
            ylab = Y.plotlab
            )
})
plot.means <- with( SECCp,
                   aggregate( cbind( Y.trans ),
                             list(Pos = Position, Frag = Frag),
                             mean
                             )
                   )
with( plot.means, {
  plot.error <- matrix( as.numeric(lsd.FxP/2),
                       nrow = length(levels(Pos)),
                       ncol = length(levels(Frag))
                       )
  plotMeans( Y.trans, Frag, Pos,
            error.bars = "custom", level = plot.error, cex = 2, lwd = 2,
            lty = Position.map$lty, pch = Position.map$pch,
            col = as.character(Position.map$col),
            bg  = as.character(Position.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Frag"]],
            ylab = Y.plotlab
            )
})
plot.means <- with( SECCp,
                   aggregate( cbind( Y.trans ),
Plot.Title <- bquote(.(Time.label) * "Meta-Community means " %+-% "95% LSD")
plot.means <- with( SECCmc,
                   aggregate( cbind( Y.trans ),
                             list(Chamber=Chamber),
                             mean
                             )
                   )
Plot.Title <- bquote(.(Time.label) * "Meta-Community means " %+-% "95% LSD")
plot.means <- with( SECCmc,
                   aggregate( cbind( Y.trans ),
                             list(Chamber=Chamber),
                             mean
                             )
                   )
plot.error <- rep( as.numeric(lsd.mc.C/2), length(levels(plot.means$Chamber)) )
par( mfrow=c(1,1), lty=1, cex=1, lwd=1 )
with( plot.means, {
  plotMeans( Y.trans , Chamber,
            error.bars="custom", level=plot.error, cex=2, lwd=2,
            lty=1, pch=Chamber.map$pch,
            col=as.character(Chamber.map$col),
            bg=as.character(Chamber.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Chamber"]],
            ylab = Y.plotlab
            )   # as.character() is needed for string arguments (color hex strings), but I'm still not entirely sure why.  If it is not used, that argument is essentially ignored, and (ugly) defaults are used instead.
})
## Patch results: Chamber x Position
plot.means <- with( SECCp,
                   aggregate( cbind( Y.trans ),
                             list(Position = Position, Chamber = Chamber),
                             mean
                             )
                   )
with( plot.means, {
  plot.error <- matrix( as.numeric(lsd["Chamber:Position"]/2),
                       nrow = length(levels(Position)),
                       ncol = length(levels(Chamber))
                       )
  plotMeans( Y.trans, Chamber, Position,
            error.bars = "custom", level = plot.error, cex = 2, lwd = 2,
            lty = Position.map$lty, pch = Position.map$pch,
            col = as.character(Position.map$col),
            bg  = as.character(Position.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Chamber"]],
            ylab = Y.plotlab
            )
})
plot.means
plot.error
length(levels(plot.means$Position))
length(levels(plot.means$Chamber))
matrix( as.numeric(lsd["Chamber:Position"]/2),#
                       nrow = 3,#
                       ncol = 2#
                       )
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
plot.error
plot.means
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
c
n
n
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
Plot.Title <- bquote(.(Time.label) * "Meta-Community means " %+-% "95% LSD")
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
source("/tmp/r-plugin-jaw/Rsource-1030-ARA.R")
source("/tmp/r-plugin-jaw/Rsource-1030-ARA.R")
source("/tmp/r-plugin-jaw/Rsource-1030-Cyanobacteria.R")
plot(Yp.aov)
plot(Yp.aov$Within)
class(Yp.aov)
TukeyHSD
TukeyHSD.aov
class(Yp.aov$Within)
TukeyHSD(Yp.aov$Within)
TukeyHSD.aov(Yp.aov$Within)
?ls
?lsd
??"least significant difference"
