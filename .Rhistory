par(mfrow=c(1,2),pty='s') ## Graphical parameters
n=200  ## Number of samples to draw (you can change this if you want)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
beanbag_data = read.csv("http://goo.gl/6ex0N")
beanbag_data
ggplot(data = beanbag_data, aes(x = bag)) +
    geom_histogram(binwidth=0.25)
beanbag_prob = mean(beanbag_data$bag)/10
beanbag_n = nrow(beanbag_data)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
ggplot(data = beanbag_data, aes(x = bag)) +
    geom_histogram(binwidth=0.25)
beanbag_prob = mean(beanbag_data$bag)/10
beanbag_n = nrow(beanbag_data)
rbinom(beanbag_n, size = 10, prob = beanbag_prob)
beanbag_data
beanbag_data = read.csv("http://goo.gl/6ex0N")
beanbag_data
beanbag_data = read.csv("http://goo.gl/6ex0N")
beanbag_data
ggplot(data = beanbag_data, aes(x = bag)) +
    geom_histogram(binwidth=0.25)
beanbag_prob = mean(beanbag_data$bag)/10
beanbag_n = nrow(beanbag_data)
rbinom(beanbag_n, size = 10, prob = beanbag_prob)
binom_proportions = rep(0, 5000)
for(i in 1:5000){               #the basic procedure is to draw new random samples from our model and fit the test statistic several thousand times
  test_sim_binom = rbinom(beanbag_n, size = 10, beanbag_prob)
  binom_proportions[i] =  mean(test_sim_binom)/10
}
test_se = sd(binom_proportions)
obs_se = sd(beanbag_data$bag/10)/sqrt(beanbag_n)
test_stat = obs_se - test_se
test_se
obs_se
test_stat = obs_se - test_se        # generic test statistic
test_stat
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
prob_obs
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
binom_sim_plot
  cold_adapt_data = read.csv("http://goo.gl/np42L")
par(mfrow=c(1,2),pty="s")
plot(cold_adapt_data$mass, cold_adapt_data$fat)
abline(lm(fat~mass, data=cold_adapt_data))
plot(cold_adapt_data$mass, cold_adapt_data$stored)
abline(lm(stored~mass, data=cold_adapt_data))
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
summary(sat_linear_reg)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
summary(sat_linear_reg)
summary(fat_nonlinear_reg)
summary(stored_linear_reg)
summary(stored_nonlinear_reg)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
prob_fat
prob_stored
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
linear_kelp_sims = list(original_data = kelp_data)
for(i in 1:15){
  test_name = paste("test",i, sep="")
  sim_urchin = kelp_data$urchin_density
  sim_kelp = rnorm(n_kelp, mean = fitted(kelp_linear),sd = kelp_sd)
  linear_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
                                              kelp_density= sim_kelp)
}
linear_kelp_sims = ldply(linear_kelp_sims)
linear_kelp_plot = ggplot(data=linear_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point() + facet_wrap(~.id) +
stat_smooth(method = "lm",se=F, size=1.5)+
stat_smooth(se=F, colour="red", size=1.5)
show(linear_kelp_plot)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
abline(lm(kelp_density~urchin_density, data=kelp_data[1:40, ]))
plot(kelp_data$urchin_density, kelp_data$kelp_density)
abline(lm(kelp_density~urchin_density, data=kelp_data[1:40, ]))
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
zinf_kelp_sims = list(original_data = kelp_data)
for(i in 1:15){
  test_name = paste("test",i, sep="")
  sim_urchin = kelp_data$urchin_density
  sim_kelp = rnorm(n_kelp, mean = kelp_pos_dens,sd = kelp_sd_pos)
  sim_kelp = sim_kelp*rbinom(n_kelp, size=1, prob = kelp_prob)
  zinf_kelp_sims[[test_name]] = data.frame(urchin_density= sim_urchin,
                                              kelp_density= sim_kelp)
}
zinf_kelp_sims = ldply(zinf_kelp_sims)
zinf_kelp_plot = ggplot(data=zinf_kelp_sims, aes(x=urchin_density, y= kelp_density)) +
geom_point()+ facet_wrap(~.id) +
stat_smooth(method = "lm",se=F, size=1.5)+
stat_smooth(se=F, colour="red", size=1.5)
show(zinf_kelp_plot)
source("/tmp/r-plugin-jaw/Rsource-40689-sims&bootstrappingscript-JAW.R")
install.packages("glmulti")
library(glmulti)
help,start()
help.start()
x = "foo"
load("/Users/jaw/Desktop/workspace")
ls()
assign("x", 3)
x
?log
x <- 10^-(1+2*1:9)#
cbind(x, log(1+x), log1p(x), exp(x)-1, expm1(x))
help.start()
  setwd("./ SECC/")  # relative to my usual default wd in R GUI (Mac).
  getwd()  # Check that we're in the right place
source('./lib/init.R')
library(lattice)
library(lme4)
library(ggplot2)
X.col <- 'Cells.m'   # Column to analyze as explanatory variable        *****
Y.col <- 'ARA.m'     # Column to analyze as response variable           *****
vars.ls   <- c("ARA.m", "Cells.m", "Hcells.m", "H2O")  # for data exploration?
Time.use     <- levels(SECC$Time)[1]      # Time (index: 1-3) to include in this run
Chamber.use  <- levels(SECC$Chamber)[c(1, 3)]      # Chamber treatments to include
Frag.use     <- levels(SECC$Frag)         # Frag treatments to include
Position.use <- levels(SECC$Position)[c(1, 3)]     # Patch Positions to include
Save.results  <- FALSE
SECC.prime <- SECC    # save a copy of the original for reference.
sampleA  <- 6   # sample Area, in cm^2:  pi * (2.75/2)^2 ; pi * (2.8 / 2)^2
sample.to.m2 <- (100*100)/sampleA   # scale sample area, in cm^2 to m^2
sample_ml    <- 50  # 50 ml sample
ARA.m2   <- sampleA/(100*100)  # ARA sample area,   in (cm^2 to) m^2
patchA   <- pi * (12.5^2)      # patch area
patch.m2 <- patchA/(100*100)   # patch sample area, in (cm^2 to) m^2
Nfix.ARA.ratio <- 1/3  # ratio of N-fixation : ARA.
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
str(SECC)
source('./lib/init.R')
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
X.label <- attr(SECC, "labels")[[X.col]]  # explanatory variable label
X.units <- attr(SECC, "units" )[[X.col]]  # explanatory variable units
Y.label <- attr(SECC, "labels")[[Y.col]]  # response variable label
Y.units <- attr(SECC, "units" )[[Y.col]]  # response variable units
X.plotlab <- bquote( .(X.label) * "  " * .(X.units) *  "" )
Y.plotlab <- bquote( .(Y.label) * "  " * .(Y.units) *  "" )
labels.ls <- c()
for(i in 1:length(vars.ls) ){
  var <- vars.ls[i]
  labels.ls[i] <- attr(SECC, "labels")[[var]]
}
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
  str( SECCa)     # check structure: are the appropriate variables factors, numeric, etc.?
Chamber.map <- plotMap( "Chamber", labels = levels(SECC$Chamber) )
Chamber.map <- Chamber.map[ levels(SECC$Chamber) %in% Chamber.use, ]
Chamber.map$label <- factor(Chamber.map$label)
point <- 21	# 21 for circles with col & bg ; 16 for solid circles
Chamber.map$pch <- c(21, 16)  # use circles for both treatments
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
  Y.formula <- Y ~ log(X+1) * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="quasipoisson" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Model.resid <- resid(Y.model)
par(mfrow=c(1,1))	 # panel of figures: 1 rows & 1 columns
hist(Model.resid)    # plot residuals
coplot( Model.resid ~ X | Frag * Position, data=SECCa,
       pch=SECCa$pt, col=SECCa$colr,
       ylab = "Residuals"
)
anova(Y.model)
summary(Y.model)
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
?glm
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Model.resid <- resid(Y.model)
par(mfrow=c(1,1))	 # panel of figures: 1 rows & 1 columns
hist(Model.resid)    # plot residuals
coplot( Model.resid ~ X | Frag * Position, data=SECCa,
       pch=SECCa$pt, col=SECCa$colr,
       ylab = "Residuals"
)
anova(Y.model)
summary(Y.model)
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
Y.model <- glm( Y.formula, data=SECCa, family="gamma" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Y.model <- glm( Y.formula, data=SECCa, family="quasipoisson" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
  Y.formula <- log(Y) ~ log(X+1) * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="quasipoisson" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Y.formula
Y.model <- glm( Y.formula, data=SECCa, family="poisson" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Model.resid <- resid(Y.model)
par(mfrow=c(1,1))	 # panel of figures: 1 rows & 1 columns
hist(Model.resid)    # plot residuals
Y.model <- glm( Y.formula, data=SECCa, family="binomial" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
  Y.formula <- log(Y) ~ log(X+1) * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
summary(Y.model)
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
  Y.formula <- Y ~ log(X+1) * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
summary(Y.model)
?drop1
drop1(Y.model)
?summary.aov
?anova
anova(Y.model)
Y.model <- glm( Y.formula, data=SECCa, family="binomial" )
Y.model <- glm( Y.formula, data=SECCa, family="quasibinomial" )
?family
Y.model <- glm( Y.formula, data=SECCa, family="Gamma" )
  Y.formula <- Y ~ X * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="Gamma" )
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
  Y.formula <- Y ~ X * Chamber * Frag * Position * H2O
Y.model <- glm( Y.formula, data=SECCa, family="gaussian" )
par(mfrow=c(2,2))	 # panel of figures: 3 rows & 2 columns
plot(Y.model)
Y.model <- glm( Y.formula, data=SECCa, family="quasipoisson" )
plot(Y.model)
drop1(Y.model)
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
source("/tmp/r-plugin-jaw/Rsource-38743-ARA~cyanobacteria.R")
