        qqline( Y.4rt,  col="grey50" )
    })
}
## DEFINE MODEL FORMULA
## Nested Fixed Effects, with error term for ANOVA using aov()
Yp.model <- Y.trans ~ Chamber*Frag*Position +Error(Block/Chamber/Frag)
## ignoring effect of position: 'regional' effects only
Ymc.model <- Y.trans ~ Chamber*Frag +Error(Block/Chamber/Frag)
## ANALYSIS: design
Yp.aov <- aov( Yp.model, data=SECCp )   # simple ANOVA with nested fixed effects.  Nesting means an object of type "aovlist" is produced* (therefore regular TukeyHSD & other functions won't work )
Ymc.aov <- aov( Ymc.model, data=SECCmc )    # regional effects only.
## CHECK ASSUMPTIONS: analyse residuals, standard diagnostic plots
## anova
## independence?
    ## experimental design: random position of Frag within Chambers.
    ## possibility of Block gradient (7&8 SW -> 1-6 E:N), which also corresponds roughly to order of samples.
## Patch analyses
## trellis plots: any pattern across blocks, within frag & chambers?
xyplot(Y.trans ~ Block | Frag + Chamber, data=SECCp,
       pch=21, col="black", bg="grey", cex=0.8,
       main = Dataset.labels[1]
       )
par( mfrow=c(2,2), cex=0.8) # panel of figures: 2 rows & 2 columns
## homogeneity of variances?
with( SECCp, plot(Y.trans ~ Chamber*Frag*Position) )    # fixed effects only, no nesting
##* PROMPT *
## plot.new()  # put next plot in empty panel?
## normal distribution?
Yp.residuals <- resid(Yp.aov$Within)
with(SECCp, qqnorm( Yp.residuals, main="Residuals", sub=Dataset.labels[1] ) )   # are residuals normally distributed?
qqline(Yp.residuals,  col="grey50")
par( mfrow=c(1,1) )
hist(Yp.residuals)  # plot residuals
# with(SECCp, shapiro.test( Yp.residuals ) )    # normality?
##================================================
## REGIONAL analyses
xyplot( Y.trans ~ Block | Frag + Chamber, data=SECCmc,
       pch=21, col="black", bg="grey", cex=0.8,
       main = Dataset.labels[2]
       )
par( mfrow=c(2,2), cex=0.8) # panel of figures: 2 rows & 2 columns
# homogeneity of variances?
with( SECCmc, plot(Y.trans ~ Chamber*Frag) )    # fixed effects only, no nesting
# normal distribution?
##* PROMPT *
## plot.new()  # for stupid "Hit <Return> ..." prompt when going line-by-line :(
Ymc.residuals <- resid(Ymc.aov$"Block:Chamber:Frag")
with(SECCmc, qqnorm( Ymc.residuals, main="Residuals", sub=Dataset.labels[2] ) ) # are residuals normally distributed?
qqline(Ymc.residuals,  col="grey50")
par( mfrow=c(1,1) )
hist(Ymc.residuals) # plot residuals
## with(SECCmc, shapiro.test( Ymc.residuals ) )  # normality?
## ANALYSIS: GET RESULTS
## Patch analyses
# names(Yp.aov)
summary(Yp.aov)                 # summary statistics
model.tables(Yp.aov, "means")   # effect sizes
# Interaction Plots
par(mfrow=c(2,2))   # panel of figures: 2 rows & 2 columns
with( SECCp, interaction.plot(Frag, Chamber, Y.trans,
                              ylab = paste("mean of", Y.use)
                              )
     )
with( SECCp, interaction.plot(Position, Chamber, Y.trans,
                              ylab=paste("mean of", Y.use)
                              )
     )
with( SECCp, interaction.plot(Position, Frag, Y.trans,
                              ylab=paste("mean of ", Y.use)
                              )
     )
##________________________________________________
## Planned Multiple Comparisons using Least Significant Differences (LSD) -> comparison intervals for graphical display.
# Chamber x Pos Interaction
lsd <- LSD( Yp.aov$Within, Yp.model, data=SECCp, alpha=0.05, mode="pairwise" )  # compute LSDs based on a 5% error rate (alpha), 2-tailed.  mode="manual" if unbalanced data ( provide n as an estimate).
lsd.CxP <- lsd["Chamber:Position"]
lsd.FxP <- lsd["Frag:Position"]
lsd.CxFxP <- lsd["Chamber:Frag:Position"]
##================================================
## Regional analyses
## names(Ymc.aov)
summary(Ymc.aov)        # summary statistics
model.tables(Ymc.aov, "means")  # effect sizes
# Interaction Plots
par(mfrow=c(1,1))   # panel of figures: 1 rows & 1 columns
with( SECCmc, interaction.plot( Frag, Chamber, Y.trans,
                               ylab=paste("mean of ", Y.use)
                               )
     )
##________________________________________________
## Planned Multiple Comparisons using Least Significant Differences (LSD) -> comparison intervals for graphical display.
lsd.mc <- LSD( Ymc.aov$"Block:Chamber:Frag", Ymc.model, data=SECCmc, alpha=0.05, mode="pairwise" )   # compute LSDs based on a 5% error rate (alpha), 2-tailed.
lsd.mc.FxC <- lsd.mc["Chamber:Frag"]
lsd.mc <- LSD( Ymc.aov$"Block:Chamber", Ymc.model, data=SECCmc, alpha=0.05, mode="pairwise" )    # compute LSDs based on a 5% error rate (alpha), 2-tailed.
lsd.mc.C <- lsd.mc["Chamber"]
## SAVE OUTPUT
if (Save.results == TRUE && is.null(Save.text) == FALSE) {
  capture.output(cat(Save.header, Save.patch.header, sep=""),
				 print(Yp.model),                 # model
				 summary(Yp.aov),                 # model summary
				 cat("\n\n"),                     # for output
				 model.tables(Yp.aov, "means"),   # effect sizes
				 cat(Header.lsd),
				 print(lsd),
				 cat(Save.mc.header),             # Meta-Community Results
				 print(Ymc.model),                # model
				 summary(Ymc.aov),                # model summary
				 cat("\n\n"),                     # for output
				 model.tables(Ymc.aov, "means"),  # effect sizes
				 cat(Header.lsd),
				 print(lsd.mc),
				 cat(Save.end),                   # END OUTPUT
				 file = Save.text
				)
}
if (Save.results == TRUE && is.null(Save.plots) == FALSE && Save.plots != Save.final) dev.off()
## FINAL GRAPHICS
if (Save.results == TRUE && is.null(Save.final) == FALSE && Save.plots != Save.final) pdf( file = Save.final )
Chamber.map <- plotMap_Chamber( labels = levels(SECC$Chamber) )
Chamber.map <- Chamber.map[ levels(SECC$Chamber) %in% Chamber.use, ]
Frag.map    <- plotMap_Frag( labels = levels(SECCp$Frag) )
Plot.Title <- bquote(.(Time.use) * ": Patch means " %+-% "95% LSD")
## Patch results: Chamber x Position
plot.means <- with( SECCp,
                   aggregate( cbind( Y.trans ),
                             list(Pos = Position, Chamber = Chamber),
                             mean
                             )
                   )
par( mfrow=c(1,1), lty=1, cex=1, lwd=1 )
with( plot.means, {
  ## using custom plotMeans function, with custom error bars (LSD)
  plot.error <- matrix( as.numeric(lsd.CxP/2),
                       nrow = length(levels(Pos)),
                       ncol = length(levels(Chamber))
                       )
  plotMeans( Y.trans , Pos , Chamber,
            error.bars = "custom", level = plot.error, cex = 2, lwd = 2,
            lty = Chamber.map$lty, pch = Chamber.map$pch,
            col = as.character(Chamber.map$col),
            bg  = as.character(Chamber.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Pos"]],
            ylab = Y.plotlab
            )
  ## as.character() is needed for string arguments (color hex strings), but I'm still not entirely sure why.  If it is not used, that argument is essentially ignored, and (ugly) defaults are used instead.
})
## Patch results: Frag x Position (significant in t4)
plot.means <- with( SECCp,
                   aggregate( cbind( Y.trans ),
                             list(Pos = Position, Frag = Frag),
                             mean
                             )
                   )
par( mfrow=c(1,1), lty=1, cex=1, lwd=1 )
with( plot.means, {
  ## using custom plotMeans function, with custom error bars (LSD)
  plot.error <- matrix( as.numeric(lsd.FxP/2),
                       nrow = length(levels(Pos)),
                       ncol = length(levels(Frag))
                       )
  plotMeans( Y.trans , Pos , Frag,
            error.bars = "custom", level = plot.error, cex = 2, lwd = 2,
            lty = Frag.map$lty, pch = Frag.map$pch,
            col = as.character(Frag.map$col),
            bg  = as.character(Frag.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Pos"]],
            ylab = Y.plotlab
            )   # as.character() is needed for string arguments (color hex strings), but I'm still not entirely sure why.  If it is not used, that argument is essentially ignored, and (ugly) defaults are used instead.
})
##================================================
## META-COMMUNITY results
Plot.Title <- bquote(.(Time.use) * ": Meta-Community means " %+-% "95% LSD")
plot.means <- with( SECCmc,
                   aggregate( cbind( Y.trans ),
                             list(Frag=Frag, Chamber=Chamber),
                             mean
                             )
                   )
par( mfrow=c(1,1), lty=1, cex=1, lwd=1 )
with( plot.means, {
  ## using custom plotMeans function, with custom error bars (LSD)
  plot.error <- matrix( as.numeric(lsd.mc.FxC/2),
                       nrow = length(levels(Frag)),
                       ncol = length(levels(Chamber))
                       )
  plotMeans( Y.trans , Frag , Chamber,
            error.bars="custom", level=plot.error, cex=2, lwd=2,
            lty=Chamber.map$lty, pch=Chamber.map$pch,
            col=as.character(Chamber.map$col),
            bg=as.character(Chamber.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Frag"]],
            ylab = Y.plotlab
            )   # as.character() is needed for string arguments (color hex strings), but I'm still not entirely sure why.  If it is not used, that argument is essentially ignored, and (ugly) defaults are used instead.
})
## Chamber Main Effects
plot.means <- with( SECCmc,
                   aggregate( cbind( Y.trans ),
                             list(Chamber=Chamber),
                             mean
                             )
                   )
plot.error <- rep( as.numeric(lsd.mc.C/2), length(levels(plot.means$Chamber)) )
par( mfrow=c(1,1), lty=1, cex=1, lwd=1 )
with( plot.means, {
  ## using custom plotMeans function, with custom error bars (LSD)
  plotMeans( Y.trans , Chamber,
            error.bars="custom", level=plot.error, cex=2, lwd=2,
            lty=1, pch=Chamber.map$pch,
            col=as.character(Chamber.map$col),
            bg=as.character(Chamber.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Chamber"]],
            ylab = Y.plotlab
            )   # as.character() is needed for string arguments (color hex strings), but I'm still not entirely sure why.  If it is not used, that argument is essentially ignored, and (ugly) defaults are used instead.
})
## Fragmentation Main Effects
plot.means <- with( SECCmc,
                   aggregate( cbind( Y.trans ),
                             list(Frag=Frag),
                             mean
                             )
                   )
plot.error <- rep( as.numeric(lsd.mc.C/2), length(levels(plot.means$Frag)) )
par( mfrow=c(1,1), lty=1, cex=1, lwd=1 )
with( plot.means, {
  ## using custom plotMeans function, with custom error bars (LSD)
  plotMeans( Y.trans , Frag,
            error.bars="custom", level=plot.error, cex=2, lwd=2,
            lty=1, pch=Frag.map$pch,
            col=as.character(Frag.map$col),
            bg=as.character(Frag.map$bg),
            main = Plot.Title,
            sub  = "95% comparison intervals (LSD)",
            xlab = attr(SECC, "labels")[["Frag"]],
            ylab = Y.plotlab
            )   # as.character() is needed for string arguments (color hex strings), but I'm still not entirely sure why.  If it is not used, that argument is essentially ignored, and (ugly) defaults are used instead.
})
if (Save.results == TRUE && is.null(Save.plots) == FALSE) dev.off()
Save.results
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
plot.means
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
source("/tmp/r-plugin-jaw/Rsource-1030-SECC-nestedANOVA.R")
